2012-11-05 01:23:04,061 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:23:04,062 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:04,063 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:04,064 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:04,081 [main] DEBUG org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:106) - Adding transactional method 'handle' with attribute: PROPAGATION_REQUIRES_NEW,ISOLATION_DEFAULT; ''
2012-11-05 01:23:04,083 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520749840
2012-11-05 01:23:04,084 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:23:04,085 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:04,086 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:04,087 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:23:04,087 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:23:04,089 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:04,092 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:23:04,094 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:04,095 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,096 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,097 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,097 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:04,098 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,099 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:23:04,100 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,101 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:04,102 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,107 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:04,108 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:23:04,109 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:23:04,109 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:23:04,114 [main] DEBUG org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:202) - Executing identity-insert immediately
2012-11-05 01:23:04,117 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:23:04,124 [main] DEBUG org.hibernate.id.IdentifierGeneratorHelper.getGeneratedIdentity(IdentifierGeneratorHelper.java:93) - Natively generated identity: 1
2012-11-05 01:23:04,125 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:23:04,126 [main] DEBUG org.hibernate.engine.spi.CollectionEntry.preFlush(CollectionEntry.java:199) - Collection dirty: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,126 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef], was: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef] (initialized)
2012-11-05 01:23:04,128 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
2012-11-05 01:23:04,129 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 1 updates, 0 removals to 1 collections
2012-11-05 01:23:04,129 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:23:04,130 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=1, price=component[currencyCode,price]{price=3.9, currencyCode=EUR}, item=boardgame, lineId=1}
2012-11-05 01:23:04,130 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=807e5e9e-e80a-4b01-84c9-b8b35c3762ef, state=Draft, lines=[com.emo.sample.domain.order.OrderLine#1], forCustomerCode=d8a3f420-88bf-46d2-b65a-df962832f566}
2012-11-05 01:23:04,131 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1262) - Deleting rows of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,131 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1344) - No rows to delete
2012-11-05 01:23:04,132 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1369) - Inserting rows of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,133 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:23:04,138 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1444) - Done inserting rows: 1 inserted
2012-11-05 01:23:04,138 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:23:04,139 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:23:04,139 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:23:04,140 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:04,140 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:04,140 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:04,141 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520749841
2012-11-05 01:23:04,142 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:23:04,142 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:04,142 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:04,143 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:23:04,143 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:23:04,144 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:04,145 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:23:04,146 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:04,147 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,147 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,148 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,149 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:04,149 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,150 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:23:04,151 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,152 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:04,153 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:04,156 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,157 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:04,158 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:04,158 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:04,159 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,159 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:04,160 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:23:04,160 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:23:04,161 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:23:04,161 [main] DEBUG org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:202) - Executing identity-insert immediately
2012-11-05 01:23:04,162 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:23:04,163 [main] DEBUG org.hibernate.id.IdentifierGeneratorHelper.getGeneratedIdentity(IdentifierGeneratorHelper.java:93) - Natively generated identity: 2
2012-11-05 01:23:04,164 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:23:04,164 [main] DEBUG org.hibernate.engine.spi.CollectionEntry.preFlush(CollectionEntry.java:199) - Collection dirty: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,165 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef], was: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef] (initialized)
2012-11-05 01:23:04,165 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2012-11-05 01:23:04,166 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 1 updates, 0 removals to 1 collections
2012-11-05 01:23:04,166 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:23:04,166 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=2, price=component[currencyCode,price]{price=2.55, currencyCode=EUR}, item=candy bag, lineId=2}
2012-11-05 01:23:04,167 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=1, price=component[currencyCode,price]{price=3.9, currencyCode=EUR}, item=boardgame, lineId=1}
2012-11-05 01:23:04,167 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=807e5e9e-e80a-4b01-84c9-b8b35c3762ef, state=Draft, lines=[com.emo.sample.domain.order.OrderLine#1, com.emo.sample.domain.order.OrderLine#2], forCustomerCode=d8a3f420-88bf-46d2-b65a-df962832f566}
2012-11-05 01:23:04,167 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1262) - Deleting rows of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,168 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1344) - No rows to delete
2012-11-05 01:23:04,168 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1369) - Inserting rows of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,169 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:23:04,170 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1444) - Done inserting rows: 1 inserted
2012-11-05 01:23:04,171 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:23:04,171 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:23:04,172 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:23:04,172 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:04,173 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:04,173 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:04,175 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520749841
2012-11-05 01:23:04,175 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:23:04,176 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:04,176 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:04,177 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:23:04,177 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:23:04,177 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:04,179 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:23:04,180 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:04,181 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,181 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,182 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,182 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:04,182 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,183 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:23:04,185 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,185 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:04,186 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:04,186 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,187 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 1
2012-11-05 01:23:04,187 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:04,188 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,188 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:04,190 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:04,190 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:04,191 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:04,191 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:04,192 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,192 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:04,192 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:23:04,193 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:23:04,193 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:23:04,194 [main] DEBUG org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:202) - Executing identity-insert immediately
2012-11-05 01:23:04,195 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:23:04,196 [main] DEBUG org.hibernate.id.IdentifierGeneratorHelper.getGeneratedIdentity(IdentifierGeneratorHelper.java:93) - Natively generated identity: 3
2012-11-05 01:23:04,197 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:23:04,198 [main] DEBUG org.hibernate.engine.spi.CollectionEntry.preFlush(CollectionEntry.java:199) - Collection dirty: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,198 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef], was: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef] (initialized)
2012-11-05 01:23:04,198 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
2012-11-05 01:23:04,199 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 1 updates, 0 removals to 1 collections
2012-11-05 01:23:04,199 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:23:04,200 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=2, price=component[currencyCode,price]{price=2.55, currencyCode=EUR}, item=candy bag, lineId=2}
2012-11-05 01:23:04,200 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=1, price=component[currencyCode,price]{price=3.9, currencyCode=EUR}, item=boardgame, lineId=1}
2012-11-05 01:23:04,200 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=3, price=component[currencyCode,price]{price=499.0, currencyCode=EUR}, item=led tv, lineId=3}
2012-11-05 01:23:04,201 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=807e5e9e-e80a-4b01-84c9-b8b35c3762ef, state=Draft, lines=[com.emo.sample.domain.order.OrderLine#1, com.emo.sample.domain.order.OrderLine#2, com.emo.sample.domain.order.OrderLine#3], forCustomerCode=d8a3f420-88bf-46d2-b65a-df962832f566}
2012-11-05 01:23:04,201 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1262) - Deleting rows of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,201 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1344) - No rows to delete
2012-11-05 01:23:04,202 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1369) - Inserting rows of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,202 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:23:04,203 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1444) - Done inserting rows: 1 inserted
2012-11-05 01:23:04,204 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:23:04,204 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:23:04,204 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:23:04,204 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:04,206 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:04,206 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:04,207 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520749842
2012-11-05 01:23:04,208 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:04,209 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:04,210 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:04,211 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:23:04,212 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:04,212 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,213 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,214 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,214 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:04,215 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,216 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:23:04,217 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,217 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:04,218 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:04,219 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,220 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 1
2012-11-05 01:23:04,220 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:04,221 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,221 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 2
2012-11-05 01:23:04,221 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#3]
2012-11-05 01:23:04,223 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,223 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:04,224 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:04,225 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:04,225 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:04,225 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#3]
2012-11-05 01:23:04,227 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#3]
2012-11-05 01:23:04,227 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:04,227 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#807e5e9e-e80a-4b01-84c9-b8b35c3762ef]
2012-11-05 01:23:04,231 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:04,232 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:23:04,233 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:04,233 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:04,234 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:04,250 [Thread-1] DEBUG org.hibernate.internal.SessionFactoryImpl.close(SessionFactoryImpl.java:1408) - HHH000031: Closing
2012-11-05 01:23:04,251 [Thread-1] DEBUG org.hibernate.ejb.internal.EntityManagerFactoryRegistry.removeEntityManagerFactory(EntityManagerFactoryRegistry.java:107) - Remove: name=sample
2012-11-05 01:23:24,495 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@fce9d7
2012-11-05 01:23:24,500 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@fce9d7
2012-11-05 01:23:24,501 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@fce9d7
2012-11-05 01:23:24,503 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c64a78
2012-11-05 01:23:24,506 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@d68a6e
2012-11-05 01:23:24,507 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration yes_no -> org.hibernate.type.YesNoType@1a5fd35
2012-11-05 01:23:24,511 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@8c4ce2
2012-11-05 01:23:24,512 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@8c4ce2
2012-11-05 01:23:24,512 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@8c4ce2
2012-11-05 01:23:24,514 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration character -> org.hibernate.type.CharacterType@1a06db5
2012-11-05 01:23:24,515 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char -> org.hibernate.type.CharacterType@1a06db5
2012-11-05 01:23:24,516 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1a06db5
2012-11-05 01:23:24,519 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@905c6e
2012-11-05 01:23:24,520 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@905c6e
2012-11-05 01:23:24,520 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@905c6e
2012-11-05 01:23:24,523 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration integer -> org.hibernate.type.IntegerType@1c19940
2012-11-05 01:23:24,525 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration int -> org.hibernate.type.IntegerType@1c19940
2012-11-05 01:23:24,525 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@1c19940
2012-11-05 01:23:24,528 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@135f26b
2012-11-05 01:23:24,529 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@135f26b
2012-11-05 01:23:24,529 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@135f26b
2012-11-05 01:23:24,533 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@576b3d
2012-11-05 01:23:24,534 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@576b3d
2012-11-05 01:23:24,534 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@576b3d
2012-11-05 01:23:24,537 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@f4abb9
2012-11-05 01:23:24,537 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@f4abb9
2012-11-05 01:23:24,538 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@f4abb9
2012-11-05 01:23:24,541 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@5c427e
2012-11-05 01:23:24,542 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@5c427e
2012-11-05 01:23:24,544 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@6b765a
2012-11-05 01:23:24,545 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@6b765a
2012-11-05 01:23:24,547 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration string -> org.hibernate.type.StringType@1eac9a7
2012-11-05 01:23:24,547 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.String -> org.hibernate.type.StringType@1eac9a7
2012-11-05 01:23:24,550 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration url -> org.hibernate.type.UrlType@11b1e49
2012-11-05 01:23:24,550 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@11b1e49
2012-11-05 01:23:24,554 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration date -> org.hibernate.type.DateType@1abbcda
2012-11-05 01:23:24,554 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@1abbcda
2012-11-05 01:23:24,558 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration time -> org.hibernate.type.TimeType@1aa85f6
2012-11-05 01:23:24,558 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@1aa85f6
2012-11-05 01:23:24,562 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timestamp -> org.hibernate.type.TimestampType@12db58d
2012-11-05 01:23:24,562 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@12db58d
2012-11-05 01:23:24,562 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@12db58d
2012-11-05 01:23:24,565 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@17801e6
2012-11-05 01:23:24,567 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar -> org.hibernate.type.CalendarType@d7e9c3
2012-11-05 01:23:24,568 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@d7e9c3
2012-11-05 01:23:24,568 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@d7e9c3
2012-11-05 01:23:24,570 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@7b1ff8
2012-11-05 01:23:24,572 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration locale -> org.hibernate.type.LocaleType@17576df
2012-11-05 01:23:24,573 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@17576df
2012-11-05 01:23:24,575 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration currency -> org.hibernate.type.CurrencyType@844472
2012-11-05 01:23:24,575 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@844472
2012-11-05 01:23:24,577 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@15f2afe
2012-11-05 01:23:24,578 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@15f2afe
2012-11-05 01:23:24,580 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration class -> org.hibernate.type.ClassType@14ce06a
2012-11-05 01:23:24,580 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@14ce06a
2012-11-05 01:23:24,584 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@2842b6
2012-11-05 01:23:24,584 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@2842b6
2012-11-05 01:23:24,589 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@1041ec7
2012-11-05 01:23:24,591 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@50243d
2012-11-05 01:23:24,594 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration binary -> org.hibernate.type.BinaryType@2d5f10
2012-11-05 01:23:24,595 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte[] -> org.hibernate.type.BinaryType@2d5f10
2012-11-05 01:23:24,595 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [B -> org.hibernate.type.BinaryType@2d5f10
2012-11-05 01:23:24,597 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@1595f65
2012-11-05 01:23:24,598 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@1595f65
2012-11-05 01:23:24,598 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@1595f65
2012-11-05 01:23:24,600 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration image -> org.hibernate.type.ImageType@d9b971
2012-11-05 01:23:24,602 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration characters -> org.hibernate.type.CharArrayType@ff2441
2012-11-05 01:23:24,603 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char[] -> org.hibernate.type.CharArrayType@ff2441
2012-11-05 01:23:24,603 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [C -> org.hibernate.type.CharArrayType@ff2441
2012-11-05 01:23:24,606 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@9cc591
2012-11-05 01:23:24,606 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@9cc591
2012-11-05 01:23:24,607 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@9cc591
2012-11-05 01:23:24,609 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration text -> org.hibernate.type.TextType@1594bee
2012-11-05 01:23:24,619 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration blob -> org.hibernate.type.BlobType@1938132
2012-11-05 01:23:24,619 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1938132
2012-11-05 01:23:24,620 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@4a6572
2012-11-05 01:23:24,629 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration clob -> org.hibernate.type.ClobType@a65dac
2012-11-05 01:23:24,629 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@a65dac
2012-11-05 01:23:24,630 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@726f2a
2012-11-05 01:23:24,633 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration serializable -> org.hibernate.type.SerializableType@10b0419
2012-11-05 01:23:24,639 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration object -> org.hibernate.type.ObjectType@3a516d
2012-11-05 01:23:24,640 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@3a516d
2012-11-05 01:23:24,641 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1e30850
2012-11-05 01:23:24,641 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@36f7a0
2012-11-05 01:23:24,642 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@bb4949
2012-11-05 01:23:24,642 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@1c85d20
2012-11-05 01:23:24,642 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@159e6f1
2012-11-05 01:23:24,643 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1490818
2012-11-05 01:23:24,643 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1b27d09
2012-11-05 01:23:24,643 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@12f1015
2012-11-05 01:23:24,683 [main] INFO  org.hibernate.annotations.common.Version.<clinit>(Version.java:37) - HCANN000001: Hibernate Commons Annotations {4.0.1.Final}
2012-11-05 01:23:24,701 [main] INFO  org.hibernate.Version.logVersion(Version.java:41) - HHH000412: Hibernate Core {4.1.1}
2012-11-05 01:23:24,705 [main] INFO  org.hibernate.cfg.Environment.<clinit>(Environment.java:239) - HHH000206: hibernate.properties not found
2012-11-05 01:23:24,708 [main] INFO  org.hibernate.cfg.Environment.buildBytecodeProvider(Environment.java:342) - HHH000021: Bytecode provider name : javassist
2012-11-05 01:23:24,732 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2012-11-05 01:23:24,733 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2012-11-05 01:23:24,735 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:23:24,736 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:23:24,738 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
2012-11-05 01:23:24,740 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2012-11-05 01:23:24,742 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2012-11-05 01:23:24,744 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2012-11-05 01:23:24,745 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
2012-11-05 01:23:24,746 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2012-11-05 01:23:24,748 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2012-11-05 01:23:24,749 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2012-11-05 01:23:24,756 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2012-11-05 01:23:24,758 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2012-11-05 01:23:24,760 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2012-11-05 01:23:24,764 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@fce9d7
2012-11-05 01:23:24,765 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@fce9d7
2012-11-05 01:23:24,765 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@fce9d7
2012-11-05 01:23:24,766 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@c64a78
2012-11-05 01:23:24,766 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@d68a6e
2012-11-05 01:23:24,766 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration yes_no -> org.hibernate.type.YesNoType@1a5fd35
2012-11-05 01:23:24,767 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@8c4ce2
2012-11-05 01:23:24,767 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@8c4ce2
2012-11-05 01:23:24,767 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@8c4ce2
2012-11-05 01:23:24,768 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration character -> org.hibernate.type.CharacterType@1a06db5
2012-11-05 01:23:24,768 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char -> org.hibernate.type.CharacterType@1a06db5
2012-11-05 01:23:24,768 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1a06db5
2012-11-05 01:23:24,769 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@905c6e
2012-11-05 01:23:24,769 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@905c6e
2012-11-05 01:23:24,769 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@905c6e
2012-11-05 01:23:24,769 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration integer -> org.hibernate.type.IntegerType@1c19940
2012-11-05 01:23:24,770 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration int -> org.hibernate.type.IntegerType@1c19940
2012-11-05 01:23:24,770 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@1c19940
2012-11-05 01:23:24,770 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@135f26b
2012-11-05 01:23:24,771 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@135f26b
2012-11-05 01:23:24,771 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@135f26b
2012-11-05 01:23:24,772 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@576b3d
2012-11-05 01:23:24,772 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@576b3d
2012-11-05 01:23:24,772 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@576b3d
2012-11-05 01:23:24,773 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@f4abb9
2012-11-05 01:23:24,773 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@f4abb9
2012-11-05 01:23:24,774 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@f4abb9
2012-11-05 01:23:24,774 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@5c427e
2012-11-05 01:23:24,774 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@5c427e
2012-11-05 01:23:24,775 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@6b765a
2012-11-05 01:23:24,775 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@6b765a
2012-11-05 01:23:24,775 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration string -> org.hibernate.type.StringType@1eac9a7
2012-11-05 01:23:24,776 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.String -> org.hibernate.type.StringType@1eac9a7
2012-11-05 01:23:24,776 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration url -> org.hibernate.type.UrlType@11b1e49
2012-11-05 01:23:24,776 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@11b1e49
2012-11-05 01:23:24,776 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration date -> org.hibernate.type.DateType@1abbcda
2012-11-05 01:23:24,777 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@1abbcda
2012-11-05 01:23:24,777 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration time -> org.hibernate.type.TimeType@1aa85f6
2012-11-05 01:23:24,777 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@1aa85f6
2012-11-05 01:23:24,778 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timestamp -> org.hibernate.type.TimestampType@12db58d
2012-11-05 01:23:24,778 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@12db58d
2012-11-05 01:23:24,778 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@12db58d
2012-11-05 01:23:24,778 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@17801e6
2012-11-05 01:23:24,779 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar -> org.hibernate.type.CalendarType@d7e9c3
2012-11-05 01:23:24,779 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@d7e9c3
2012-11-05 01:23:24,780 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@d7e9c3
2012-11-05 01:23:24,780 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@7b1ff8
2012-11-05 01:23:24,780 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration locale -> org.hibernate.type.LocaleType@17576df
2012-11-05 01:23:24,780 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@17576df
2012-11-05 01:23:24,781 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration currency -> org.hibernate.type.CurrencyType@844472
2012-11-05 01:23:24,781 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@844472
2012-11-05 01:23:24,781 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@15f2afe
2012-11-05 01:23:24,782 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@15f2afe
2012-11-05 01:23:24,782 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration class -> org.hibernate.type.ClassType@14ce06a
2012-11-05 01:23:24,782 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@14ce06a
2012-11-05 01:23:24,783 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@2842b6
2012-11-05 01:23:24,783 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@2842b6
2012-11-05 01:23:24,783 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@1041ec7
2012-11-05 01:23:24,784 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@50243d
2012-11-05 01:23:24,784 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration binary -> org.hibernate.type.BinaryType@2d5f10
2012-11-05 01:23:24,784 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte[] -> org.hibernate.type.BinaryType@2d5f10
2012-11-05 01:23:24,785 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [B -> org.hibernate.type.BinaryType@2d5f10
2012-11-05 01:23:24,785 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@1595f65
2012-11-05 01:23:24,785 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@1595f65
2012-11-05 01:23:24,785 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@1595f65
2012-11-05 01:23:24,786 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration image -> org.hibernate.type.ImageType@d9b971
2012-11-05 01:23:24,786 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration characters -> org.hibernate.type.CharArrayType@ff2441
2012-11-05 01:23:24,786 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char[] -> org.hibernate.type.CharArrayType@ff2441
2012-11-05 01:23:24,787 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [C -> org.hibernate.type.CharArrayType@ff2441
2012-11-05 01:23:24,787 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@9cc591
2012-11-05 01:23:24,787 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@9cc591
2012-11-05 01:23:24,788 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@9cc591
2012-11-05 01:23:24,788 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration text -> org.hibernate.type.TextType@1594bee
2012-11-05 01:23:24,789 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration blob -> org.hibernate.type.BlobType@1938132
2012-11-05 01:23:24,789 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1938132
2012-11-05 01:23:24,790 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@4a6572
2012-11-05 01:23:24,790 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration clob -> org.hibernate.type.ClobType@a65dac
2012-11-05 01:23:24,790 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@a65dac
2012-11-05 01:23:24,791 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@726f2a
2012-11-05 01:23:24,791 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration serializable -> org.hibernate.type.SerializableType@10b0419
2012-11-05 01:23:24,791 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration object -> org.hibernate.type.ObjectType@3a516d
2012-11-05 01:23:24,792 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@3a516d
2012-11-05 01:23:24,792 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@9bcfd4
2012-11-05 01:23:24,793 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@1698c89
2012-11-05 01:23:24,793 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@89ae7d
2012-11-05 01:23:24,793 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@11ea763
2012-11-05 01:23:24,793 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@17f562e
2012-11-05 01:23:24,794 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@f30fce
2012-11-05 01:23:24,794 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@192de7f
2012-11-05 01:23:24,794 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@14d67bb
2012-11-05 01:23:24,795 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2012-11-05 01:23:24,795 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2012-11-05 01:23:24,796 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:23:24,796 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:23:24,796 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
2012-11-05 01:23:24,797 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2012-11-05 01:23:24,797 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2012-11-05 01:23:24,797 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2012-11-05 01:23:24,797 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
2012-11-05 01:23:24,798 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2012-11-05 01:23:24,798 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2012-11-05 01:23:24,799 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2012-11-05 01:23:24,799 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2012-11-05 01:23:24,799 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2012-11-05 01:23:24,799 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2012-11-05 01:23:24,802 [main] DEBUG org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:525) - Processing PersistenceUnitInfo [
	name: sample
	persistence provider classname: null
	classloader: sun.misc.Launcher$AppClassLoader@1ff5ea7
	Temporary classloader: org.springframework.instrument.classloading.SimpleThrowawayClassLoader@a14c18
	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.SimpleDriverDataSource@18ae503
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/Cedroic/workspaces/smsoip/ws-skeleton/target/test-classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		com.emo.sample.domain.Client
		com.emo.sample.domain.order.Order
		com.emo.sample.domain.order.OrderLine
		com.emo.sample.domain.order.Price]
	Mapping files names []
	Properties []
2012-11-05 01:23:24,806 [main] DEBUG org.hibernate.ejb.Ejb3Configuration.setDetectedArtifactsOnScanningContext(Ejb3Configuration.java:841) - Detect class: true; detect hbm: true
2012-11-05 01:23:24,824 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.unqualify(AbstractJarVisitor.java:125) - Searching mapped entities in jar/par: file:/C:/Users/Cedroic/workspaces/smsoip/ws-skeleton/target/test-classes/
2012-11-05 01:23:24,826 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.acceptances.ClientIsMovingTest
2012-11-05 01:23:24,890 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.acceptances.NewClientTest
2012-11-05 01:23:24,892 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.acceptances.NewOrderTest
2012-11-05 01:23:24,894 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.framework.CommandDispatcherTest
2012-11-05 01:23:24,895 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.framework.HandlerBeanProcessorTest
2012-11-05 01:23:24,897 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.ClientIsMovingTest
2012-11-05 01:23:24,899 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest$RunBatchRestCalls
2012-11-05 01:23:24,901 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest$RunHessianCalls
2012-11-05 01:23:24,902 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest$RunRestCalls
2012-11-05 01:23:24,903 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest
2012-11-05 01:23:24,906 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.mains.WebMain
2012-11-05 01:23:24,907 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.utils.CommandUtils
2012-11-05 01:23:24,908 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.utils.EmbeddedServer
2012-11-05 01:23:24,949 [main] DEBUG org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:59) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2012-11-05 01:23:24,949 [main] DEBUG org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:59) - Adding Integrator [org.hibernate.ejb.event.JpaIntegrator].
2012-11-05 01:23:24,989 [main] DEBUG org.hibernate.ejb.util.NamingHelper.bind(NamingHelper.java:50) - No JNDI name configured for binding Ejb3Configuration
2012-11-05 01:23:25,005 [main] DEBUG org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1725) - Preparing to build session factory with filters : {}
2012-11-05 01:23:25,054 [main] DEBUG org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3391) - Processing hbm.xml files
2012-11-05 01:23:25,054 [main] DEBUG org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:3421) - Process annotated classes
2012-11-05 01:23:25,061 [main] DEBUG org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:530) - Binding entity from annotated class: com.emo.sample.domain.Client
2012-11-05 01:23:25,101 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2012-11-05 01:23:25,115 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) - Import with entity name Client
2012-11-05 01:23:25,122 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:534) - Bind entity com.emo.sample.domain.Client on table Client
2012-11-05 01:23:25,164 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=clientCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,172 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property clientCode with lazy=false
2012-11-05 01:23:25,176 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for clientCode
2012-11-05 01:23:25,179 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property clientCode
2012-11-05 01:23:25,186 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=city, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,187 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property city with lazy=false
2012-11-05 01:23:25,187 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for city
2012-11-05 01:23:25,188 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property city
2012-11-05 01:23:25,188 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=countryCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,189 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property countryCode with lazy=false
2012-11-05 01:23:25,189 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for countryCode
2012-11-05 01:23:25,190 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property countryCode
2012-11-05 01:23:25,190 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=name, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,191 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property name with lazy=false
2012-11-05 01:23:25,191 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for name
2012-11-05 01:23:25,192 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property name
2012-11-05 01:23:25,192 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=street, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,193 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property street with lazy=false
2012-11-05 01:23:25,193 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for street
2012-11-05 01:23:25,194 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property street
2012-11-05 01:23:25,194 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=zip, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,195 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property zip with lazy=false
2012-11-05 01:23:25,195 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for zip
2012-11-05 01:23:25,195 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property zip
2012-11-05 01:23:25,198 [main] DEBUG org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:530) - Binding entity from annotated class: com.emo.sample.domain.order.Order
2012-11-05 01:23:25,199 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2012-11-05 01:23:25,199 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) - Import with entity name Order
2012-11-05 01:23:25,200 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:534) - Bind entity com.emo.sample.domain.order.Order on table SalesOrder
2012-11-05 01:23:25,227 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=orderCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,227 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property orderCode with lazy=false
2012-11-05 01:23:25,228 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for orderCode
2012-11-05 01:23:25,228 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property orderCode
2012-11-05 01:23:25,228 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=forCustomerCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,229 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property forCustomerCode with lazy=false
2012-11-05 01:23:25,229 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for forCustomerCode
2012-11-05 01:23:25,230 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property forCustomerCode
2012-11-05 01:23:25,231 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='', mappedBy=''}
2012-11-05 01:23:25,232 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=lines, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,234 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=null, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,257 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=element, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,259 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=lines_KEY, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,260 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='lines_KEY', referencedColumn='null', mappedBy='null'}
2012-11-05 01:23:25,263 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
2012-11-05 01:23:25,263 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
2012-11-05 01:23:25,265 [main] DEBUG org.hibernate.cfg.annotations.CollectionBinder.bind(CollectionBinder.java:402) - Collection role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:25,270 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property lines
2012-11-05 01:23:25,270 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=state, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,271 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property state with lazy=false
2012-11-05 01:23:25,274 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for state
2012-11-05 01:23:25,274 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property state
2012-11-05 01:23:25,275 [main] DEBUG org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:530) - Binding entity from annotated class: com.emo.sample.domain.order.OrderLine
2012-11-05 01:23:25,275 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2012-11-05 01:23:25,276 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) - Import with entity name OrderLine
2012-11-05 01:23:25,276 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:534) - Bind entity com.emo.sample.domain.order.OrderLine on table OrderLine
2012-11-05 01:23:25,283 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=id, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,284 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property internalId with lazy=false
2012-11-05 01:23:25,284 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for internalId
2012-11-05 01:23:25,285 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property internalId
2012-11-05 01:23:25,285 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=item, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,286 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property item with lazy=false
2012-11-05 01:23:25,286 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for item
2012-11-05 01:23:25,287 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property item
2012-11-05 01:23:25,287 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=lineId, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,288 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property lineId with lazy=false
2012-11-05 01:23:25,288 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for lineId
2012-11-05 01:23:25,289 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property lineId
2012-11-05 01:23:25,290 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=price, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,295 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=currencyCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,295 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property currencyCode with lazy=false
2012-11-05 01:23:25,296 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for currencyCode
2012-11-05 01:23:25,296 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property currencyCode
2012-11-05 01:23:25,297 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=price, insertable=true, updatable=true, unique=false}
2012-11-05 01:23:25,297 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property price with lazy=false
2012-11-05 01:23:25,298 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for price
2012-11-05 01:23:25,298 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property price
2012-11-05 01:23:25,298 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property price
2012-11-05 01:23:25,300 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for clientCode
2012-11-05 01:23:25,301 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for city
2012-11-05 01:23:25,301 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for countryCode
2012-11-05 01:23:25,301 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for name
2012-11-05 01:23:25,302 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for street
2012-11-05 01:23:25,302 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for zip
2012-11-05 01:23:25,302 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for orderCode
2012-11-05 01:23:25,302 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for forCustomerCode
2012-11-05 01:23:25,303 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for state
2012-11-05 01:23:25,303 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for internalId
2012-11-05 01:23:25,303 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for item
2012-11-05 01:23:25,304 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for lineId
2012-11-05 01:23:25,305 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for currencyCode
2012-11-05 01:23:25,305 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for price
2012-11-05 01:23:25,307 [main] DEBUG org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1403) - Processing fk mappings (*ToOne and JoinedSubclass)
2012-11-05 01:23:25,309 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1579) - Processing extends queue
2012-11-05 01:23:25,309 [main] DEBUG org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1633) - Processing extends queue
2012-11-05 01:23:25,310 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1582) - Processing collection mappings
2012-11-05 01:23:25,310 [main] DEBUG org.hibernate.cfg.CollectionSecondPass.doSecondPass(CollectionSecondPass.java:64) - Second pass for collection: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:25,310 [main] DEBUG org.hibernate.cfg.annotations.CollectionBinder.bindOneToManySecondPass(CollectionBinder.java:761) - Binding a OneToMany: com.emo.sample.domain.order.Order.lines through a foreign key
2012-11-05 01:23:25,312 [main] DEBUG org.hibernate.cfg.annotations.CollectionBinder.bindOneToManySecondPass(CollectionBinder.java:790) - Mapping collection: com.emo.sample.domain.order.Order.lines -> OrderLine
2012-11-05 01:23:25,318 [main] DEBUG org.hibernate.cfg.CollectionSecondPass.doSecondPass(CollectionSecondPass.java:80) - Mapped collection key: lines_orderCode, one-to-many: com.emo.sample.domain.order.OrderLine
2012-11-05 01:23:25,318 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1592) - Processing native query and ResultSetMapping mappings
2012-11-05 01:23:25,319 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1600) - Processing association property references
2012-11-05 01:23:25,319 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1622) - Processing foreign key constraints
2012-11-05 01:23:25,319 [main] DEBUG org.hibernate.cfg.Configuration.secondPassCompileForeignKeys(Configuration.java:1690) - Resolving reference to class: com.emo.sample.domain.order.Order
2012-11-05 01:23:25,365 [main] INFO  org.hibernate.service.jdbc.connections.internal.ConnectionProviderInitiator.instantiateExplicitConnectionProvider(ConnectionProviderInitiator.java:188) - HHH000130: Instantiating explicit connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
2012-11-05 01:23:25,413 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:121) - Database ->
       name : HSQL Database Engine
    version : 2.2.8
      major : 2
      minor : 2
2012-11-05 01:23:25,414 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:127) - Driver ->
       name : HSQL Database Engine Driver
    version : 2.2.8
      major : 2
      minor : 2
2012-11-05 01:23:25,415 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:133) - JDBC version : 4.0
2012-11-05 01:23:25,441 [main] INFO  org.hibernate.dialect.Dialect.<init>(Dialect.java:122) - HHH000400: Using dialect: org.hibernate.dialect.HSQLDialect
2012-11-05 01:23:25,490 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:100) - Automatic flush during beforeCompletion(): disabled
2012-11-05 01:23:25,490 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:106) - Automatic session close at end of transaction: disabled
2012-11-05 01:23:25,490 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:117) - JDBC batch size: 15
2012-11-05 01:23:25,491 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:123) - JDBC batch updates for versioned data: disabled
2012-11-05 01:23:25,491 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:133) - Scrollable result sets: enabled
2012-11-05 01:23:25,491 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:139) - Wrap result sets: disabled
2012-11-05 01:23:25,492 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:145) - JDBC3 getGeneratedKeys(): enabled
2012-11-05 01:23:25,492 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:157) - Connection release mode: auto
2012-11-05 01:23:25,493 [main] INFO  org.hibernate.engine.transaction.internal.TransactionFactoryInitiator.initiateService(TransactionFactoryInitiator.java:73) - HHH000268: Transaction strategy: org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory
2012-11-05 01:23:25,497 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:194) - Default batch fetch size: 1
2012-11-05 01:23:25,497 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:200) - Generate SQL with comments: disabled
2012-11-05 01:23:25,498 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:206) - Order SQL updates by primary key: disabled
2012-11-05 01:23:25,498 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:212) - Order SQL inserts for batching: disabled
2012-11-05 01:23:25,499 [main] DEBUG org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:443) - Query translator: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
2012-11-05 01:23:25,503 [main] INFO  org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:48) - HHH000397: Using ASTQueryTranslatorFactory
2012-11-05 01:23:25,503 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:222) - Query language substitutions: {}
2012-11-05 01:23:25,504 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:228) - JPA-QL strict compliance: enabled
2012-11-05 01:23:25,504 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:236) - Second-level cache: enabled
2012-11-05 01:23:25,505 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:242) - Query cache: disabled
2012-11-05 01:23:25,505 [main] DEBUG org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:383) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2012-11-05 01:23:25,507 [main] DEBUG org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:393) - org.hibernate.cache.internal.NoCachingRegionFactory did not provide constructor accepting java.util.Properties; attempting no-arg constructor.
2012-11-05 01:23:25,508 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:257) - Optimize cache for minimal puts: disabled
2012-11-05 01:23:25,508 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:272) - Structured second-level cache entries: disabled
2012-11-05 01:23:25,508 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:281) - Statistics: disabled
2012-11-05 01:23:25,509 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:287) - Deleted entity synthetic identifier rollback: disabled
2012-11-05 01:23:25,509 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:311) - Default entity-mode: pojo
2012-11-05 01:23:25,510 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:317) - Named query checking : enabled
2012-11-05 01:23:25,510 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:323) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2012-11-05 01:23:25,510 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:329) - multi-tenancy strategy : NONE
2012-11-05 01:23:25,525 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:226) - Building session factory
2012-11-05 01:23:25,537 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:276) - Session factory constructed with filter configurations : {}
2012-11-05 01:23:25,538 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:277) - Instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=C:\Program Files\Java\jre7\bin, java.vm.version=21.1-b02, java.vm.vendor=Oracle Corporation, java.vendor.url=http://java.oracle.com/, path.separator=;, java.vm.name=Java HotSpot(TM) Client VM, file.encoding.pkg=sun.io, user.script=, user.country=FR, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=C:\Users\Cedroic\workspaces\smsoip\ws-skeleton, javax.persistence.sharedCache.mode=UNSPECIFIED, java.runtime.version=1.7.0_01-b08, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=C:\Program Files\Java\jre7\lib\endorsed, os.arch=x86, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\Cedroic\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, user.variant=, os.name=Windows 7, sun.jnu.encoding=Cp1252, java.library.path=C:\Program Files\Java\jre7\bin;C:\windows\Sun\Java\bin;C:\windows\system32;C:\windows;C:/Program Files/Java/jre7/bin/client;C:/Program Files/Java/jre7/bin;C:/Program Files/Java/jre7/lib/i386;D:\vertx\vert.x-1.2.3-final\bin;D:\apache-maven-3.0.4\bin;D:\spring-roo-1.2.0.RC1\bin;C:\windows\system32;C:\windows;C:\windows\System32\Wbem;C:\windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files\Mercurial\;C:\Program Files\Git\cmd;D:\springsource\sts-2.8.1.RELEASE;;., hibernate.connection.datasource=org.springframework.jdbc.datasource.SimpleDriverDataSource@18ae503, java.specification.name=Java Platform API Specification, java.class.version=51.0, sun.management.compiler=HotSpot Client Compiler, hibernate.transaction.factory_class=org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory, os.version=6.1, user.home=C:\Users\Cedroic, user.timezone=Europe/Paris, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.7, file.encoding=Cp1252, user.name=Cedroic, java.class.path=C:\Users\Cedroic\workspaces\smsoip\ws-skeleton\target\test-classes;C:\Users\Cedroic\workspaces\smsoip\ws-skeleton\target\classes;C:\Users\Cedroic\.m2\repository\junit\junit\4.10\junit-4.10.jar;C:\Users\Cedroic\.m2\repository\org\hamcrest\hamcrest-core\1.1\hamcrest-core-1.1.jar;C:\Users\Cedroic\.m2\repository\com\jayway\restassured\rest-assured\1.6.2\rest-assured-1.6.2.jar;C:\Users\Cedroic\.m2\repository\org\codehaus\groovy\groovy\1.8.4\groovy-1.8.4.jar;C:\Users\Cedroic\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Cedroic\.m2\repository\asm\asm-commons\3.2\asm-commons-3.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm-util\3.2\asm-util-3.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm-analysis\3.2\asm-analysis-3.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm-tree\3.2\asm-tree-3.2.jar;C:\Users\Cedroic\.m2\repository\org\apache\httpcomponents\httpclient\4.1.3\httpclient-4.1.3.jar;C:\Users\Cedroic\.m2\repository\org\apache\httpcomponents\httpcore\4.1.4\httpcore-4.1.4.jar;C:\Users\Cedroic\.m2\repository\commons-codec\commons-codec\1.4\commons-codec-1.4.jar;C:\Users\Cedroic\.m2\repository\org\apache\httpcomponents\httpmime\4.1.3\httpmime-4.1.3.jar;C:\Users\Cedroic\.m2\repository\org\hamcrest\hamcrest-library\1.2.1\hamcrest-library-1.2.1.jar;C:\Users\Cedroic\.m2\repository\commons-collections\commons-collections\3.2.1\commons-collections-3.2.1.jar;C:\Users\Cedroic\.m2\repository\org\apache\commons\commons-lang3\3.1\commons-lang3-3.1.jar;C:\Users\Cedroic\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar;C:\Users\Cedroic\.m2\repository\org\hamcrest\hamcrest-all\1.3\hamcrest-all-1.3.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-core\3.1.2.RELEASE\spring-core-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-asm\3.1.2.RELEASE\spring-asm-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\commons-logging\commons-logging\1.1.1\commons-logging-1.1.1.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-context\3.1.2.RELEASE\spring-context-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-aop\3.1.2.RELEASE\spring-aop-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-beans\3.1.2.RELEASE\spring-beans-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-expression\3.1.2.RELEASE\spring-expression-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-web\3.1.2.RELEASE\spring-web-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-tx\3.1.2.RELEASE\spring-tx-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-orm\3.1.2.RELEASE\spring-orm-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-jdbc\3.1.2.RELEASE\spring-jdbc-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-test\3.1.2.RELEASE\spring-test-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\hibernate-entitymanager\4.1.1.Final\hibernate-entitymanager-4.1.1.Final.jar;C:\Users\Cedroic\.m2\repository\org\jboss\logging\jboss-logging\3.1.0.GA\jboss-logging-3.1.0.GA.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\hibernate-core\4.1.1.Final\hibernate-core-4.1.1.Final.jar;C:\Users\Cedroic\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.1_spec\1.0.0.Final\jboss-transaction-api_1.1_spec-1.0.0.Final.jar;C:\Users\Cedroic\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Cedroic\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;C:\Users\Cedroic\.m2\repository\org\javassist\javassist\3.15.0-GA\javassist-3.15.0-GA.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.1.Final\hibernate-commons-annotations-4.0.1.Final.jar;C:\Users\Cedroic\.m2\repository\net\sf\oval\oval\1.81\oval-1.81.jar;C:\Users\Cedroic\.m2\repository\org\hsqldb\hsqldb\2.2.8\hsqldb-2.2.8.jar;C:\Users\Cedroic\.m2\repository\org\slf4j\slf4j-log4j12\1.6.6\slf4j-log4j12-1.6.6.jar;C:\Users\Cedroic\.m2\repository\org\slf4j\slf4j-api\1.6.6\slf4j-api-1.6.6.jar;C:\Users\Cedroic\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Cedroic\.m2\repository\cglib\cglib\2.2.2\cglib-2.2.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm\3.3.1\asm-3.3.1.jar;C:\Users\Cedroic\.m2\repository\org\springframework\data\spring-data-jpa\1.1.1.RELEASE\spring-data-jpa-1.1.1.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\data\spring-data-commons-core\1.3.2.RELEASE\spring-data-commons-core-1.3.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\slf4j\jcl-over-slf4j\1.6.1\jcl-over-slf4j-1.6.1.jar;C:\Users\Cedroic\.m2\repository\org\aspectj\aspectjrt\1.6.12\aspectjrt-1.6.12.jar;C:\Users\Cedroic\.m2\repository\com\yammer\metrics\metrics-core\2.1.3\metrics-core-2.1.3.jar;C:\Users\Cedroic\.m2\repository\javolution\javolution\5.5.1\javolution-5.5.1.jar;C:\Users\Cedroic\.m2\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;C:\Users\Cedroic\.m2\repository\it\unimi\dsi\fastutil\6.4.1\fastutil-6.4.1.jar;C:\Users\Cedroic\.m2\repository\net\minidev\json-smart\2.0-RC2\json-smart-2.0-RC2.jar;C:\Users\Cedroic\.m2\repository\net\minidev\asm\1.0-RC1\asm-1.0-RC1.jar;C:\Users\Cedroic\.m2\repository\com\google\guava\guava\10.0.1\guava-10.0.1.jar;C:\Users\Cedroic\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar;C:\Users\Cedroic\.m2\repository\com\googlecode\disruptor\disruptor\2.10.3\disruptor-2.10.3.jar;C:\Users\Cedroic\.m2\repository\com\caucho\resin\4.0.30\resin-4.0.30.jar;C:\Users\Cedroic\.m2\repository\com\caucho\resin-javaee16\4.0.30\resin-javaee16-4.0.30.jar;C:\Users\Cedroic\.m2\repository\javax\activation\activation\1.1\activation-1.1.jar;C:\Users\Cedroic\.m2\repository\javax\annotation\jsr250-api\1.0\jsr250-api-1.0.jar;C:\Users\Cedroic\.m2\repository\javax\mail\mail\1.4\mail-1.4.jar;C:\Users\Cedroic\.m2\repository\com\caucho\resin-hessian\4.0.30\resin-hessian-4.0.30.jar;C:\Users\Cedroic\.m2\repository\commons-beanutils\commons-beanutils\1.8.3\commons-beanutils-1.8.3.jar;C:\Users\Cedroic\.m2\repository\org\apache\wicket\wicket-core\6.2.0\wicket-core-6.2.0.jar;C:\Users\Cedroic\.m2\repository\org\apache\wicket\wicket-util\6.2.0\wicket-util-6.2.0.jar;C:\Users\Cedroic\.m2\repository\org\apache\wicket\wicket-request\6.2.0\wicket-request-6.2.0.jar;/D:/springsource/sts-2.8.1.RELEASE/configuration/org.eclipse.osgi/bundles/418/1/.cp/;/D:/springsource/sts-2.8.1.RELEASE/configuration/org.eclipse.osgi/bundles/416/1/.cp/;/D:/springsource/sts-2.8.1.RELEASE/configuration/org.eclipse.osgi/bundles/417/1/.cp/, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, javax.persistence.validation.mode=AUTO, java.vm.specification.version=1.7, sun.arch.data.model=32, java.home=C:\Program Files\Java\jre7, sun.java.command=org.eclipse.jdt.internal.junit.runner.RemoteTestRunner -version 3 -port 56946 -testLoaderClass org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader -loaderpluginname org.eclipse.jdt.junit4.runtime -test com.emo.acceptances.NewOrderTest:holdLines, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Oracle Corporation, user.language=fr, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, sharing, java.version=1.7.0_01, hibernate.transaction.flush_before_completion=false, java.ext.dirs=C:\Program Files\Java\jre7\lib\ext;C:\windows\Sun\Java\lib\ext, sun.boot.class.path=C:\Program Files\Java\jre7\lib\resources.jar;C:\Program Files\Java\jre7\lib\rt.jar;C:\Program Files\Java\jre7\lib\sunrsasign.jar;C:\Program Files\Java\jre7\lib\jsse.jar;C:\Program Files\Java\jre7\lib\jce.jar;C:\Program Files\Java\jre7\lib\charsets.jar;C:\Program Files\Java\jre7\classes, java.vendor=Oracle Corporation, file.separator=\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=}
2012-11-05 01:23:25,667 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:107) - Setting dialect [org.hibernate.dialect.HSQLDialect]
2012-11-05 01:23:25,668 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:107) - Setting dialect [org.hibernate.dialect.HSQLDialect]
2012-11-05 01:23:25,669 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:107) - Setting dialect [org.hibernate.dialect.HSQLDialect]
2012-11-05 01:23:25,795 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3381) - Static SQL for entity: com.emo.sample.domain.order.Order
2012-11-05 01:23:25,796 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3383) -  Version select: select orderCode from SalesOrder where orderCode =?
2012-11-05 01:23:25,796 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3384) -  Snapshot select: select order_.orderCode, order_.forCustomerCode as forCusto2_1_, order_.state as state1_ from SalesOrder order_ where order_.orderCode=?
2012-11-05 01:23:25,797 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3386) -  Insert 0: insert into SalesOrder (forCustomerCode, state, orderCode) values (?, ?, ?)
2012-11-05 01:23:25,797 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3387) -  Update 0: update SalesOrder set forCustomerCode=?, state=? where orderCode=?
2012-11-05 01:23:25,797 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3388) -  Delete 0: delete from SalesOrder where orderCode=?
2012-11-05 01:23:25,802 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3381) - Static SQL for entity: com.emo.sample.domain.Client
2012-11-05 01:23:25,803 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3383) -  Version select: select clientCode from Client where clientCode =?
2012-11-05 01:23:25,804 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3384) -  Snapshot select: select client_.clientCode, client_.city as city0_, client_.countryCode as countryC3_0_, client_.name as name0_, client_.street as street0_, client_.zip as zip0_ from Client client_ where client_.clientCode=?
2012-11-05 01:23:25,804 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3386) -  Insert 0: insert into Client (city, countryCode, name, street, zip, clientCode) values (?, ?, ?, ?, ?, ?)
2012-11-05 01:23:25,804 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3387) -  Update 0: update Client set city=?, countryCode=?, name=?, street=?, zip=? where clientCode=?
2012-11-05 01:23:25,805 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3388) -  Delete 0: delete from Client where clientCode=?
2012-11-05 01:23:25,811 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3381) - Static SQL for entity: com.emo.sample.domain.order.OrderLine
2012-11-05 01:23:25,811 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3383) -  Version select: select id from OrderLine where id =?
2012-11-05 01:23:25,812 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3384) -  Snapshot select: select orderline_.id, orderline_.item as item2_, orderline_.lineId as lineId2_, orderline_.currencyCode as currency4_2_, orderline_.price as price2_ from OrderLine orderline_ where orderline_.id=?
2012-11-05 01:23:25,812 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3386) -  Insert 0: insert into OrderLine (item, lineId, currencyCode, price, id) values (?, ?, ?, ?, ?)
2012-11-05 01:23:25,812 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3387) -  Update 0: update OrderLine set item=?, lineId=?, currencyCode=?, price=? where id=?
2012-11-05 01:23:25,813 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3388) -  Delete 0: delete from OrderLine where id=?
2012-11-05 01:23:25,813 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3390) -  Identity insert: insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:23:25,825 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:613) - Static SQL for collection: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:25,825 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:614) -  Row insert: update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:23:25,826 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:616) -  Row delete: update OrderLine set lines_orderCode=null where lines_orderCode=? and id=?
2012-11-05 01:23:25,826 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:617) -  One-shot delete: update OrderLine set lines_orderCode=null where lines_orderCode=?
2012-11-05 01:23:25,859 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [NONE]: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:23:25,860 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [READ]: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:23:25,861 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [UPGRADE]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:23:25,861 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [UPGRADE_NOWAIT]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:23:25,862 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [FORCE]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:23:25,862 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [PESSIMISTIC_READ]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:23:25,863 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [PESSIMISTIC_WRITE]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:23:25,864 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [PESSIMISTIC_FORCE_INCREMENT]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:23:25,865 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [OPTIMISTIC]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:23:25,866 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [OPTIMISTIC_FORCE_INCREMENT]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:23:25,877 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_MERGE on entity com.emo.sample.domain.order.Order: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:23:25,878 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_REFRESH on entity com.emo.sample.domain.order.Order: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:23:25,878 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [NONE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,879 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [READ]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,885 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [UPGRADE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,885 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [UPGRADE_NOWAIT]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,886 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [FORCE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,887 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [PESSIMISTIC_READ]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,887 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [PESSIMISTIC_WRITE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,888 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [PESSIMISTIC_FORCE_INCREMENT]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,889 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [OPTIMISTIC]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,890 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [OPTIMISTIC_FORCE_INCREMENT]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,891 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_MERGE on entity com.emo.sample.domain.Client: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,891 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_REFRESH on entity com.emo.sample.domain.Client: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:23:25,892 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [NONE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,892 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [READ]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,893 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [UPGRADE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,894 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [UPGRADE_NOWAIT]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,894 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [FORCE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,895 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [PESSIMISTIC_READ]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,896 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [PESSIMISTIC_WRITE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,896 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [PESSIMISTIC_FORCE_INCREMENT]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,897 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [OPTIMISTIC]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,898 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [OPTIMISTIC_FORCE_INCREMENT]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,899 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_MERGE on entity com.emo.sample.domain.order.OrderLine: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,899 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_REFRESH on entity com.emo.sample.domain.order.OrderLine: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:23:25,905 [main] DEBUG org.hibernate.loader.collection.OneToManyLoader.<init>(OneToManyLoader.java:82) - Static select for one-to-many com.emo.sample.domain.order.Order.lines: select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:23:25,909 [main] DEBUG org.hibernate.internal.SessionFactoryRegistry.<init>(SessionFactoryRegistry.java:62) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@c10b6
2012-11-05 01:23:25,910 [main] DEBUG org.hibernate.internal.SessionFactoryRegistry.addSessionFactory(SessionFactoryRegistry.java:75) - Registering SessionFactory: fe94642c-9349-4595-91f9-4de80f40a40a (<unnamed>)
2012-11-05 01:23:25,910 [main] DEBUG org.hibernate.internal.SessionFactoryRegistry.addSessionFactory(SessionFactoryRegistry.java:82) - Not binding SessionFactory to JNDI, no JNDI name configured
2012-11-05 01:23:25,910 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:487) - Instantiated session factory
2012-11-05 01:23:25,911 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:1119) - Checking 0 named HQL queries
2012-11-05 01:23:25,911 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:1142) - Checking 0 named SQL queries
2012-11-05 01:23:25,919 [main] DEBUG org.hibernate.stat.internal.StatisticsInitiator.initiateServiceInternal(StatisticsInitiator.java:110) - Statistics initialized [enabled=false]
2012-11-05 01:23:25,996 [main] DEBUG org.hibernate.ejb.internal.EntityManagerFactoryRegistry.<init>(EntityManagerFactoryRegistry.java:55) - Initializing EntityManagerFactoryRegistry : org.hibernate.ejb.internal.EntityManagerFactoryRegistry@13fd435
2012-11-05 01:23:25,997 [main] DEBUG org.hibernate.ejb.internal.EntityManagerFactoryRegistry.addEntityManagerFactory(EntityManagerFactoryRegistry.java:65) - Registering EntityManagerFactory: sample 
2012-11-05 01:23:26,337 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750062
2012-11-05 01:23:26,348 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750063
2012-11-05 01:23:26,435 [main] DEBUG org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:106) - Adding transactional method 'handle' with attribute: PROPAGATION_REQUIRES_NEW,ISOLATION_DEFAULT; ''
2012-11-05 01:23:26,458 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750064
2012-11-05 01:23:26,459 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750064
2012-11-05 01:23:26,469 [main] DEBUG org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:106) - Adding transactional method 'handle' with attribute: PROPAGATION_REQUIRES_NEW,ISOLATION_DEFAULT; ''
2012-11-05 01:23:26,690 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750066
2012-11-05 01:23:26,695 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:23:26,695 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:26,696 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:26,697 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:23:26,697 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:23:26,762 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:265) - parse() - HQL: select count(*) from com.emo.sample.domain.order.Order x where x.orderCode = :id
2012-11-05 01:23:26,769 [main] DEBUG org.hibernate.hql.internal.ast.HqlParser.weakKeywords(HqlParser.java:347) - weakKeywords() : new LT(1) token - ["order",<126> previously: <41>,line=1,col=44,possibleID=true]
2012-11-05 01:23:26,776 [main] DEBUG org.hibernate.hql.internal.ast.HqlParser.weakKeywords(HqlParser.java:347) - weakKeywords() : new LT(1) token - ["Order",<126> previously: <41>,line=1,col=50,possibleID=true]
2012-11-05 01:23:26,784 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:283) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  |  \-[IDENT] Node: 'emo'
    |  |     |  |  |  |  \-[IDENT] Node: 'sample'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'order'
    |  |     |  \-[IDENT] Node: 'Order'
    |  |     \-[ALIAS] Node: 'x'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'x'
          |  \-[IDENT] Node: 'orderCode'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'id'

2012-11-05 01:23:26,785 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:23:26,822 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:109) - select << begin [level=1, statement=select]
2012-11-05 01:23:26,850 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromElement.doInitialize(FromElement.java:157) - FromClause{level=1} : com.emo.sample.domain.order.Order (x) -> order0_
2012-11-05 01:23:26,857 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : x -> order0_.orderCode
2012-11-05 01:23:26,860 [main] DEBUG org.hibernate.hql.internal.ast.tree.DotNode.getDataType(DotNode.java:599) - getDataType() : orderCode -> org.hibernate.type.StringType@1eac9a7
2012-11-05 01:23:26,861 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : x.orderCode -> order0_.orderCode
2012-11-05 01:23:26,865 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:113) - select : finishing up [level=1, statement=select]
2012-11-05 01:23:26,866 [main] DEBUG org.hibernate.hql.internal.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:631) - processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} SalesOrder order0_ ) ( where ( = ( order0_.orderCode order0_.orderCode orderCode ) ? ) ) )
2012-11-05 01:23:26,986 [main] DEBUG org.hibernate.hql.internal.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:175) - Using FROM fragment [SalesOrder order0_]
2012-11-05 01:23:26,987 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:117) - select >> end [level=1, statement=select]
2012-11-05 01:23:26,988 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:252) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SalesOrder)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[x], fromElementByTableAlias=[order0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SalesOrder order0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=x,role=null,tableName=SalesOrder,tableAlias=order0_,origin=null,columns={,className=com.emo.sample.domain.order.Order}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'order0_.orderCode' {propertyName=orderCode,dereferenceType=ALL,propertyPath=orderCode,path=x.orderCode,tableAlias=order0_,className=com.emo.sample.domain.order.Order,classAlias=x}
          |  +-[ALIAS_REF] IdentNode: 'order0_.orderCode' {alias=x, className=com.emo.sample.domain.order.Order, tableAlias=order0_}
          |  \-[IDENT] IdentNode: 'orderCode' {originalText=orderCode}
          \-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.StringType@1eac9a7}

2012-11-05 01:23:26,989 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:23:26,999 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:235) - HQL: select count(*) from com.emo.sample.domain.order.Order x where x.orderCode = :id
2012-11-05 01:23:27,000 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:236) - SQL: select count(*) as col_0_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:23:27,000 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:23:27,055 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select count(*) as col_0_0_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:23:27,101 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:27,102 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: 
2012-11-05 01:23:27,108 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:27,109 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:23:27,110 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:23:27,110 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:23:27,112 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:27,112 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:27,112 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:27,114 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750071
2012-11-05 01:23:27,115 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:23:27,115 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:27,115 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:27,116 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:23:27,116 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:23:27,140 [main] DEBUG org.hibernate.loader.Loader.loadEntity(Loader.java:2030) - Loading entity: [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,142 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:23:27,149 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:224) - No collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,150 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:27,151 [main] DEBUG org.hibernate.loader.Loader.loadEntity(Loader.java:2054) - Done entity load
2012-11-05 01:23:27,161 [main] DEBUG org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:131) - Generated identifier: 7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d, using strategy: org.hibernate.id.Assigned
2012-11-05 01:23:27,185 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:23:27,186 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:23:27,188 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:23:27,195 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d], was: [<unreferenced>] (initialized)
2012-11-05 01:23:27,197 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects
2012-11-05 01:23:27,198 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
2012-11-05 01:23:27,200 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:23:27,201 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d, state=Draft, lines=[], forCustomerCode=0182a5bc-81b2-4160-9a96-05d0f2c181e2}
2012-11-05 01:23:27,216 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into SalesOrder (forCustomerCode, state, orderCode) values (?, ?, ?)
2012-11-05 01:23:27,219 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.recreate(AbstractCollectionPersister.java:1149) - Inserting collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,219 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.recreate(AbstractCollectionPersister.java:1236) - Collection was empty
2012-11-05 01:23:27,221 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:23:27,221 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:23:27,221 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:23:27,222 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:27,222 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:27,223 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:27,225 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750072
2012-11-05 01:23:27,231 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:27,233 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:265) - parse() - HQL: select generatedAlias0 from com.emo.sample.domain.order.Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:27,234 [main] DEBUG org.hibernate.hql.internal.ast.HqlParser.weakKeywords(HqlParser.java:347) - weakKeywords() : new LT(1) token - ["order",<126> previously: <41>,line=1,col=51,possibleID=true]
2012-11-05 01:23:27,235 [main] DEBUG org.hibernate.hql.internal.ast.HqlParser.weakKeywords(HqlParser.java:347) - weakKeywords() : new LT(1) token - ["Order",<126> previously: <41>,line=1,col=57,possibleID=true]
2012-11-05 01:23:27,239 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:283) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  |  \-[IDENT] Node: 'emo'
    |  |     |  |  |  |  \-[IDENT] Node: 'sample'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'order'
    |  |     |  \-[IDENT] Node: 'Order'
    |  |     \-[ALIAS] Node: 'generatedAlias0'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'generatedAlias0'
          |  \-[IDENT] Node: 'orderCode'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'param0'

2012-11-05 01:23:27,240 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:23:27,240 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:109) - select << begin [level=1, statement=select]
2012-11-05 01:23:27,241 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromElement.doInitialize(FromElement.java:157) - FromClause{level=1} : com.emo.sample.domain.order.Order (generatedAlias0) -> order0_
2012-11-05 01:23:27,242 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : generatedAlias0 -> order0_.orderCode
2012-11-05 01:23:27,243 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : generatedAlias0 -> order0_.orderCode
2012-11-05 01:23:27,243 [main] DEBUG org.hibernate.hql.internal.ast.tree.DotNode.getDataType(DotNode.java:599) - getDataType() : orderCode -> org.hibernate.type.StringType@1eac9a7
2012-11-05 01:23:27,244 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : generatedAlias0.orderCode -> order0_.orderCode
2012-11-05 01:23:27,244 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:113) - select : finishing up [level=1, statement=select]
2012-11-05 01:23:27,244 [main] DEBUG org.hibernate.hql.internal.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:631) - processQuery() :  ( SELECT ( {select clause} order0_.orderCode ) ( FromClause{level=1} SalesOrder order0_ ) ( where ( = ( order0_.orderCode order0_.orderCode orderCode ) ? ) ) )
2012-11-05 01:23:27,247 [main] DEBUG org.hibernate.hql.internal.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:175) - Using FROM fragment [SalesOrder order0_]
2012-11-05 01:23:27,247 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:117) - select >> end [level=1, statement=select]
2012-11-05 01:23:27,248 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:252) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SalesOrder)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'order0_.orderCode as orderCode1_' {alias=generatedAlias0, className=com.emo.sample.domain.order.Order, tableAlias=order0_}
    |  \-[SQL_TOKEN] SqlFragment: 'order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[generatedAlias0], fromElementByTableAlias=[order0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SalesOrder order0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=SalesOrder,tableAlias=order0_,origin=null,columns={,className=com.emo.sample.domain.order.Order}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'order0_.orderCode' {propertyName=orderCode,dereferenceType=ALL,propertyPath=orderCode,path=generatedAlias0.orderCode,tableAlias=order0_,className=com.emo.sample.domain.order.Order,classAlias=generatedAlias0}
          |  +-[ALIAS_REF] IdentNode: 'order0_.orderCode' {alias=generatedAlias0, className=com.emo.sample.domain.order.Order, tableAlias=order0_}
          |  \-[IDENT] IdentNode: 'orderCode' {originalText=orderCode}
          \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=org.hibernate.type.StringType@1eac9a7}

2012-11-05 01:23:27,249 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:23:27,249 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:235) - HQL: select generatedAlias0 from com.emo.sample.domain.order.Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:27,250 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:236) - SQL: select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:23:27,250 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:23:27,272 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:27,273 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:27,278 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:23:27,279 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:27,280 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,285 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,286 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,286 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:27,288 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,290 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:23:27,290 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,292 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,293 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,293 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,294 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:23:27,294 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:27,294 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:27,295 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:27,307 [main] DEBUG org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:106) - Adding transactional method 'handle' with attribute: PROPAGATION_REQUIRES_NEW,ISOLATION_DEFAULT; ''
2012-11-05 01:23:27,308 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750073
2012-11-05 01:23:27,308 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:23:27,308 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:27,309 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:27,309 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:23:27,310 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:23:27,310 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:27,311 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:23:27,312 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:27,313 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,314 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,314 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,315 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:27,315 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,316 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:23:27,317 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,318 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,318 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,318 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,319 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:23:27,319 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:23:27,320 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:23:27,324 [main] DEBUG org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:202) - Executing identity-insert immediately
2012-11-05 01:23:27,326 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:23:27,332 [main] DEBUG org.hibernate.id.IdentifierGeneratorHelper.getGeneratedIdentity(IdentifierGeneratorHelper.java:93) - Natively generated identity: 1
2012-11-05 01:23:27,333 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:23:27,334 [main] DEBUG org.hibernate.engine.spi.CollectionEntry.preFlush(CollectionEntry.java:199) - Collection dirty: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,334 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d], was: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d] (initialized)
2012-11-05 01:23:27,336 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
2012-11-05 01:23:27,336 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 1 updates, 0 removals to 1 collections
2012-11-05 01:23:27,336 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:23:27,337 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=1, price=component[currencyCode,price]{price=3.9, currencyCode=EUR}, item=boardgame, lineId=1}
2012-11-05 01:23:27,337 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d, state=Draft, lines=[com.emo.sample.domain.order.OrderLine#1], forCustomerCode=0182a5bc-81b2-4160-9a96-05d0f2c181e2}
2012-11-05 01:23:27,337 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1262) - Deleting rows of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,338 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1344) - No rows to delete
2012-11-05 01:23:27,338 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1369) - Inserting rows of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,339 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:23:27,343 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1444) - Done inserting rows: 1 inserted
2012-11-05 01:23:27,344 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:23:27,344 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:23:27,344 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:23:27,345 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:27,345 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:27,345 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:27,346 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750073
2012-11-05 01:23:27,346 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:23:27,347 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:27,347 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:27,348 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:23:27,350 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:23:27,351 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:27,352 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:23:27,353 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:27,353 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,354 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,355 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,355 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:27,356 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,356 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:23:27,357 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,358 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:27,358 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:27,361 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,362 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:27,363 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:27,364 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,364 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,364 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,365 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:23:27,365 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:23:27,365 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:23:27,366 [main] DEBUG org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:202) - Executing identity-insert immediately
2012-11-05 01:23:27,367 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:23:27,368 [main] DEBUG org.hibernate.id.IdentifierGeneratorHelper.getGeneratedIdentity(IdentifierGeneratorHelper.java:93) - Natively generated identity: 2
2012-11-05 01:23:27,368 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:23:27,369 [main] DEBUG org.hibernate.engine.spi.CollectionEntry.preFlush(CollectionEntry.java:199) - Collection dirty: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,369 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d], was: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d] (initialized)
2012-11-05 01:23:27,370 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2012-11-05 01:23:27,370 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 1 updates, 0 removals to 1 collections
2012-11-05 01:23:27,370 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:23:27,371 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=2, price=component[currencyCode,price]{price=2.55, currencyCode=EUR}, item=candy bag, lineId=2}
2012-11-05 01:23:27,371 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=1, price=component[currencyCode,price]{price=3.9, currencyCode=EUR}, item=boardgame, lineId=1}
2012-11-05 01:23:27,372 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d, state=Draft, lines=[com.emo.sample.domain.order.OrderLine#1, com.emo.sample.domain.order.OrderLine#2], forCustomerCode=0182a5bc-81b2-4160-9a96-05d0f2c181e2}
2012-11-05 01:23:27,372 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1262) - Deleting rows of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,373 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1344) - No rows to delete
2012-11-05 01:23:27,373 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1369) - Inserting rows of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,374 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:23:27,374 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1444) - Done inserting rows: 1 inserted
2012-11-05 01:23:27,375 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:23:27,375 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:23:27,376 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:23:27,376 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:27,376 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:27,376 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:27,377 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750073
2012-11-05 01:23:27,377 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:23:27,378 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:27,378 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:27,378 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:23:27,379 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:23:27,379 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:27,380 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:23:27,382 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:27,382 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,383 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,383 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,384 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:27,384 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,385 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:23:27,386 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,387 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:27,387 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:27,389 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,389 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 1
2012-11-05 01:23:27,390 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:27,390 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,391 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:27,392 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:27,393 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:27,393 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:27,394 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,394 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,394 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,395 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:23:27,395 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:23:27,395 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:23:27,402 [main] DEBUG org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:202) - Executing identity-insert immediately
2012-11-05 01:23:27,403 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:23:27,405 [main] DEBUG org.hibernate.id.IdentifierGeneratorHelper.getGeneratedIdentity(IdentifierGeneratorHelper.java:93) - Natively generated identity: 3
2012-11-05 01:23:27,406 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:23:27,406 [main] DEBUG org.hibernate.engine.spi.CollectionEntry.preFlush(CollectionEntry.java:199) - Collection dirty: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,407 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d], was: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d] (initialized)
2012-11-05 01:23:27,407 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
2012-11-05 01:23:27,408 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 1 updates, 0 removals to 1 collections
2012-11-05 01:23:27,408 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:23:27,408 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=2, price=component[currencyCode,price]{price=2.55, currencyCode=EUR}, item=candy bag, lineId=2}
2012-11-05 01:23:27,409 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=1, price=component[currencyCode,price]{price=3.9, currencyCode=EUR}, item=boardgame, lineId=1}
2012-11-05 01:23:27,409 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=3, price=component[currencyCode,price]{price=499.0, currencyCode=EUR}, item=led tv, lineId=3}
2012-11-05 01:23:27,410 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d, state=Draft, lines=[com.emo.sample.domain.order.OrderLine#1, com.emo.sample.domain.order.OrderLine#2, com.emo.sample.domain.order.OrderLine#3], forCustomerCode=0182a5bc-81b2-4160-9a96-05d0f2c181e2}
2012-11-05 01:23:27,410 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1262) - Deleting rows of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,411 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1344) - No rows to delete
2012-11-05 01:23:27,411 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1369) - Inserting rows of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,412 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:23:27,413 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1444) - Done inserting rows: 1 inserted
2012-11-05 01:23:27,414 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:23:27,414 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:23:27,414 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:23:27,415 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:27,415 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:27,415 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:27,416 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750074
2012-11-05 01:23:27,417 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:23:27,417 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:23:27,418 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:23:27,419 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:23:27,420 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:27,420 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,421 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,422 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,422 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:23:27,423 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,424 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:23:27,425 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,425 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:23:27,426 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:27,426 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,427 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 1
2012-11-05 01:23:27,427 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:27,428 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,428 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 2
2012-11-05 01:23:27,429 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#3]
2012-11-05 01:23:27,429 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,430 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:27,431 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:23:27,431 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:27,432 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:23:27,432 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#3]
2012-11-05 01:23:27,433 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#3]
2012-11-05 01:23:27,433 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,434 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#7a42267c-b9c4-4cbf-89a6-8d1d3fdf374d]
2012-11-05 01:23:27,434 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:23:27,434 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:23:27,435 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:23:27,435 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:23:27,435 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:23:27,450 [Thread-1] DEBUG org.hibernate.internal.SessionFactoryImpl.close(SessionFactoryImpl.java:1408) - HHH000031: Closing
2012-11-05 01:23:27,456 [Thread-1] DEBUG org.hibernate.ejb.internal.EntityManagerFactoryRegistry.removeEntityManagerFactory(EntityManagerFactoryRegistry.java:107) - Remove: name=sample
2012-11-05 01:24:10,701 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@5c3e75
2012-11-05 01:24:10,706 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@5c3e75
2012-11-05 01:24:10,707 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@5c3e75
2012-11-05 01:24:10,709 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@4336bc
2012-11-05 01:24:10,712 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@11a4fad
2012-11-05 01:24:10,713 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration yes_no -> org.hibernate.type.YesNoType@92d4a8
2012-11-05 01:24:10,717 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@10bc849
2012-11-05 01:24:10,718 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@10bc849
2012-11-05 01:24:10,719 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@10bc849
2012-11-05 01:24:10,721 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration character -> org.hibernate.type.CharacterType@182aacf
2012-11-05 01:24:10,721 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char -> org.hibernate.type.CharacterType@182aacf
2012-11-05 01:24:10,722 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@182aacf
2012-11-05 01:24:10,726 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@1a455be
2012-11-05 01:24:10,727 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@1a455be
2012-11-05 01:24:10,727 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1a455be
2012-11-05 01:24:10,730 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration integer -> org.hibernate.type.IntegerType@1345b80
2012-11-05 01:24:10,732 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration int -> org.hibernate.type.IntegerType@1345b80
2012-11-05 01:24:10,732 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@1345b80
2012-11-05 01:24:10,735 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@be548d
2012-11-05 01:24:10,736 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@be548d
2012-11-05 01:24:10,736 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@be548d
2012-11-05 01:24:10,740 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@141a127
2012-11-05 01:24:10,740 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@141a127
2012-11-05 01:24:10,741 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@141a127
2012-11-05 01:24:10,744 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@13639a5
2012-11-05 01:24:10,744 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@13639a5
2012-11-05 01:24:10,745 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@13639a5
2012-11-05 01:24:10,748 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1116dc4
2012-11-05 01:24:10,749 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1116dc4
2012-11-05 01:24:10,751 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@127433e
2012-11-05 01:24:10,752 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@127433e
2012-11-05 01:24:10,754 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration string -> org.hibernate.type.StringType@15d3072
2012-11-05 01:24:10,754 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.String -> org.hibernate.type.StringType@15d3072
2012-11-05 01:24:10,757 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration url -> org.hibernate.type.UrlType@1615572
2012-11-05 01:24:10,757 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@1615572
2012-11-05 01:24:10,762 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration date -> org.hibernate.type.DateType@1fba08e
2012-11-05 01:24:10,762 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@1fba08e
2012-11-05 01:24:10,765 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration time -> org.hibernate.type.TimeType@4112c0
2012-11-05 01:24:10,766 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@4112c0
2012-11-05 01:24:10,769 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timestamp -> org.hibernate.type.TimestampType@1ea5e6f
2012-11-05 01:24:10,770 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@1ea5e6f
2012-11-05 01:24:10,770 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@1ea5e6f
2012-11-05 01:24:10,773 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1c4be76
2012-11-05 01:24:10,775 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar -> org.hibernate.type.CalendarType@1341000
2012-11-05 01:24:10,776 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1341000
2012-11-05 01:24:10,776 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1341000
2012-11-05 01:24:10,777 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@1700237
2012-11-05 01:24:10,780 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration locale -> org.hibernate.type.LocaleType@cf357a
2012-11-05 01:24:10,780 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@cf357a
2012-11-05 01:24:10,782 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration currency -> org.hibernate.type.CurrencyType@1a9cdf9
2012-11-05 01:24:10,783 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1a9cdf9
2012-11-05 01:24:10,785 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@ffa511
2012-11-05 01:24:10,785 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@ffa511
2012-11-05 01:24:10,787 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration class -> org.hibernate.type.ClassType@2171aa
2012-11-05 01:24:10,788 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@2171aa
2012-11-05 01:24:10,791 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@133eb05
2012-11-05 01:24:10,791 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@133eb05
2012-11-05 01:24:10,797 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@180cfa7
2012-11-05 01:24:10,799 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@17b2615
2012-11-05 01:24:10,801 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration binary -> org.hibernate.type.BinaryType@bc2704
2012-11-05 01:24:10,802 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte[] -> org.hibernate.type.BinaryType@bc2704
2012-11-05 01:24:10,802 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [B -> org.hibernate.type.BinaryType@bc2704
2012-11-05 01:24:10,805 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@860ba9
2012-11-05 01:24:10,805 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@860ba9
2012-11-05 01:24:10,806 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@860ba9
2012-11-05 01:24:10,808 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration image -> org.hibernate.type.ImageType@1de398
2012-11-05 01:24:10,810 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration characters -> org.hibernate.type.CharArrayType@a56783
2012-11-05 01:24:10,810 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char[] -> org.hibernate.type.CharArrayType@a56783
2012-11-05 01:24:10,811 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [C -> org.hibernate.type.CharArrayType@a56783
2012-11-05 01:24:10,813 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@6edcf6
2012-11-05 01:24:10,813 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@6edcf6
2012-11-05 01:24:10,814 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@6edcf6
2012-11-05 01:24:10,816 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration text -> org.hibernate.type.TextType@187ff27
2012-11-05 01:24:10,827 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration blob -> org.hibernate.type.BlobType@1072375
2012-11-05 01:24:10,827 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1072375
2012-11-05 01:24:10,828 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@4a25ab
2012-11-05 01:24:10,836 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration clob -> org.hibernate.type.ClobType@500202
2012-11-05 01:24:10,837 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@500202
2012-11-05 01:24:10,838 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@e02ea0
2012-11-05 01:24:10,841 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration serializable -> org.hibernate.type.SerializableType@3a26ab
2012-11-05 01:24:10,846 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration object -> org.hibernate.type.ObjectType@b809cc
2012-11-05 01:24:10,847 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@b809cc
2012-11-05 01:24:10,848 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@36f7a0
2012-11-05 01:24:10,849 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@bb4949
2012-11-05 01:24:10,849 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@1c85d20
2012-11-05 01:24:10,849 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@159e6f1
2012-11-05 01:24:10,850 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1490818
2012-11-05 01:24:10,850 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1b27d09
2012-11-05 01:24:10,850 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@12f1015
2012-11-05 01:24:10,851 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@c8f62f
2012-11-05 01:24:10,889 [main] INFO  org.hibernate.annotations.common.Version.<clinit>(Version.java:37) - HCANN000001: Hibernate Commons Annotations {4.0.1.Final}
2012-11-05 01:24:10,909 [main] INFO  org.hibernate.Version.logVersion(Version.java:41) - HHH000412: Hibernate Core {4.1.1}
2012-11-05 01:24:10,912 [main] INFO  org.hibernate.cfg.Environment.<clinit>(Environment.java:239) - HHH000206: hibernate.properties not found
2012-11-05 01:24:10,915 [main] INFO  org.hibernate.cfg.Environment.buildBytecodeProvider(Environment.java:342) - HHH000021: Bytecode provider name : javassist
2012-11-05 01:24:10,943 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2012-11-05 01:24:10,944 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2012-11-05 01:24:10,946 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:24:10,947 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:24:10,950 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
2012-11-05 01:24:10,951 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2012-11-05 01:24:10,954 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2012-11-05 01:24:10,955 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2012-11-05 01:24:10,956 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
2012-11-05 01:24:10,958 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2012-11-05 01:24:10,959 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2012-11-05 01:24:10,961 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2012-11-05 01:24:10,962 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2012-11-05 01:24:10,965 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2012-11-05 01:24:10,967 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2012-11-05 01:24:10,973 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@5c3e75
2012-11-05 01:24:10,973 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@5c3e75
2012-11-05 01:24:10,974 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@5c3e75
2012-11-05 01:24:10,974 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@4336bc
2012-11-05 01:24:10,974 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@11a4fad
2012-11-05 01:24:10,975 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration yes_no -> org.hibernate.type.YesNoType@92d4a8
2012-11-05 01:24:10,975 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@10bc849
2012-11-05 01:24:10,975 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@10bc849
2012-11-05 01:24:10,976 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@10bc849
2012-11-05 01:24:10,976 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration character -> org.hibernate.type.CharacterType@182aacf
2012-11-05 01:24:10,976 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char -> org.hibernate.type.CharacterType@182aacf
2012-11-05 01:24:10,977 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@182aacf
2012-11-05 01:24:10,977 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@1a455be
2012-11-05 01:24:10,977 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@1a455be
2012-11-05 01:24:10,978 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1a455be
2012-11-05 01:24:10,978 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration integer -> org.hibernate.type.IntegerType@1345b80
2012-11-05 01:24:10,978 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration int -> org.hibernate.type.IntegerType@1345b80
2012-11-05 01:24:10,978 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@1345b80
2012-11-05 01:24:10,979 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@be548d
2012-11-05 01:24:10,980 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@be548d
2012-11-05 01:24:10,981 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@be548d
2012-11-05 01:24:10,981 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@141a127
2012-11-05 01:24:10,981 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@141a127
2012-11-05 01:24:10,982 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@141a127
2012-11-05 01:24:10,982 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@13639a5
2012-11-05 01:24:10,982 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@13639a5
2012-11-05 01:24:10,982 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@13639a5
2012-11-05 01:24:10,983 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1116dc4
2012-11-05 01:24:10,983 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1116dc4
2012-11-05 01:24:10,983 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@127433e
2012-11-05 01:24:10,984 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@127433e
2012-11-05 01:24:10,984 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration string -> org.hibernate.type.StringType@15d3072
2012-11-05 01:24:10,984 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.String -> org.hibernate.type.StringType@15d3072
2012-11-05 01:24:10,985 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration url -> org.hibernate.type.UrlType@1615572
2012-11-05 01:24:10,985 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@1615572
2012-11-05 01:24:10,985 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration date -> org.hibernate.type.DateType@1fba08e
2012-11-05 01:24:10,986 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@1fba08e
2012-11-05 01:24:10,986 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration time -> org.hibernate.type.TimeType@4112c0
2012-11-05 01:24:10,986 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@4112c0
2012-11-05 01:24:10,986 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timestamp -> org.hibernate.type.TimestampType@1ea5e6f
2012-11-05 01:24:10,987 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@1ea5e6f
2012-11-05 01:24:10,987 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@1ea5e6f
2012-11-05 01:24:10,987 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@1c4be76
2012-11-05 01:24:10,988 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar -> org.hibernate.type.CalendarType@1341000
2012-11-05 01:24:10,988 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1341000
2012-11-05 01:24:10,989 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1341000
2012-11-05 01:24:10,989 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@1700237
2012-11-05 01:24:10,990 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration locale -> org.hibernate.type.LocaleType@cf357a
2012-11-05 01:24:10,990 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@cf357a
2012-11-05 01:24:10,990 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration currency -> org.hibernate.type.CurrencyType@1a9cdf9
2012-11-05 01:24:10,990 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1a9cdf9
2012-11-05 01:24:10,991 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@ffa511
2012-11-05 01:24:10,991 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@ffa511
2012-11-05 01:24:10,991 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration class -> org.hibernate.type.ClassType@2171aa
2012-11-05 01:24:10,992 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@2171aa
2012-11-05 01:24:10,992 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@133eb05
2012-11-05 01:24:10,992 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@133eb05
2012-11-05 01:24:10,993 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@180cfa7
2012-11-05 01:24:10,993 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@17b2615
2012-11-05 01:24:10,993 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration binary -> org.hibernate.type.BinaryType@bc2704
2012-11-05 01:24:10,994 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte[] -> org.hibernate.type.BinaryType@bc2704
2012-11-05 01:24:10,994 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [B -> org.hibernate.type.BinaryType@bc2704
2012-11-05 01:24:10,994 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@860ba9
2012-11-05 01:24:10,995 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@860ba9
2012-11-05 01:24:10,995 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@860ba9
2012-11-05 01:24:10,995 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration image -> org.hibernate.type.ImageType@1de398
2012-11-05 01:24:10,996 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration characters -> org.hibernate.type.CharArrayType@a56783
2012-11-05 01:24:10,996 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char[] -> org.hibernate.type.CharArrayType@a56783
2012-11-05 01:24:10,996 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [C -> org.hibernate.type.CharArrayType@a56783
2012-11-05 01:24:10,997 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@6edcf6
2012-11-05 01:24:10,997 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@6edcf6
2012-11-05 01:24:10,997 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@6edcf6
2012-11-05 01:24:10,998 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration text -> org.hibernate.type.TextType@187ff27
2012-11-05 01:24:10,998 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration blob -> org.hibernate.type.BlobType@1072375
2012-11-05 01:24:10,998 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1072375
2012-11-05 01:24:10,999 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@4a25ab
2012-11-05 01:24:10,999 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration clob -> org.hibernate.type.ClobType@500202
2012-11-05 01:24:10,999 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@500202
2012-11-05 01:24:11,000 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@e02ea0
2012-11-05 01:24:11,000 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration serializable -> org.hibernate.type.SerializableType@3a26ab
2012-11-05 01:24:11,000 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration object -> org.hibernate.type.ObjectType@b809cc
2012-11-05 01:24:11,001 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@b809cc
2012-11-05 01:24:11,001 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1698c89
2012-11-05 01:24:11,001 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@89ae7d
2012-11-05 01:24:11,002 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@11ea763
2012-11-05 01:24:11,002 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@17f562e
2012-11-05 01:24:11,002 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@f30fce
2012-11-05 01:24:11,002 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@192de7f
2012-11-05 01:24:11,003 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@14d67bb
2012-11-05 01:24:11,003 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@d54467
2012-11-05 01:24:11,003 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2012-11-05 01:24:11,004 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2012-11-05 01:24:11,004 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:24:11,004 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:24:11,005 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
2012-11-05 01:24:11,006 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2012-11-05 01:24:11,006 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2012-11-05 01:24:11,006 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2012-11-05 01:24:11,007 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
2012-11-05 01:24:11,007 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2012-11-05 01:24:11,007 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2012-11-05 01:24:11,008 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2012-11-05 01:24:11,008 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2012-11-05 01:24:11,008 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2012-11-05 01:24:11,008 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2012-11-05 01:24:11,011 [main] DEBUG org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:525) - Processing PersistenceUnitInfo [
	name: sample
	persistence provider classname: null
	classloader: sun.misc.Launcher$AppClassLoader@e80a59
	Temporary classloader: org.springframework.instrument.classloading.SimpleThrowawayClassLoader@18ae503
	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.SimpleDriverDataSource@1c12ee7
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/Cedroic/workspaces/smsoip/ws-skeleton/target/test-classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		com.emo.sample.domain.Client
		com.emo.sample.domain.order.Order
		com.emo.sample.domain.order.OrderLine
		com.emo.sample.domain.order.Price]
	Mapping files names []
	Properties []
2012-11-05 01:24:11,015 [main] DEBUG org.hibernate.ejb.Ejb3Configuration.setDetectedArtifactsOnScanningContext(Ejb3Configuration.java:841) - Detect class: true; detect hbm: true
2012-11-05 01:24:11,033 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.unqualify(AbstractJarVisitor.java:125) - Searching mapped entities in jar/par: file:/C:/Users/Cedroic/workspaces/smsoip/ws-skeleton/target/test-classes/
2012-11-05 01:24:11,035 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.acceptances.ClientIsMovingTest
2012-11-05 01:24:11,100 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.acceptances.NewClientTest
2012-11-05 01:24:11,101 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.acceptances.NewOrderTest
2012-11-05 01:24:11,103 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.framework.CommandDispatcherTest
2012-11-05 01:24:11,105 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.framework.HandlerBeanProcessorTest
2012-11-05 01:24:11,106 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.ClientIsMovingTest
2012-11-05 01:24:11,108 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest$RunBatchRestCalls
2012-11-05 01:24:11,110 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest$RunHessianCalls
2012-11-05 01:24:11,111 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest$RunRestCalls
2012-11-05 01:24:11,112 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest
2012-11-05 01:24:11,114 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.mains.WebMain
2012-11-05 01:24:11,116 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.utils.CommandUtils
2012-11-05 01:24:11,117 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.utils.EmbeddedServer
2012-11-05 01:24:11,158 [main] DEBUG org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:59) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2012-11-05 01:24:11,158 [main] DEBUG org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:59) - Adding Integrator [org.hibernate.ejb.event.JpaIntegrator].
2012-11-05 01:24:11,201 [main] DEBUG org.hibernate.ejb.util.NamingHelper.bind(NamingHelper.java:50) - No JNDI name configured for binding Ejb3Configuration
2012-11-05 01:24:11,218 [main] DEBUG org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1725) - Preparing to build session factory with filters : {}
2012-11-05 01:24:11,263 [main] DEBUG org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3391) - Processing hbm.xml files
2012-11-05 01:24:11,264 [main] DEBUG org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:3421) - Process annotated classes
2012-11-05 01:24:11,270 [main] DEBUG org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:530) - Binding entity from annotated class: com.emo.sample.domain.Client
2012-11-05 01:24:11,311 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2012-11-05 01:24:11,326 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) - Import with entity name Client
2012-11-05 01:24:11,333 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:534) - Bind entity com.emo.sample.domain.Client on table Client
2012-11-05 01:24:11,379 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=clientCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,386 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property clientCode with lazy=false
2012-11-05 01:24:11,391 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for clientCode
2012-11-05 01:24:11,393 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property clientCode
2012-11-05 01:24:11,401 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=city, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,402 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property city with lazy=false
2012-11-05 01:24:11,402 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for city
2012-11-05 01:24:11,402 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property city
2012-11-05 01:24:11,403 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=countryCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,403 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property countryCode with lazy=false
2012-11-05 01:24:11,404 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for countryCode
2012-11-05 01:24:11,404 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property countryCode
2012-11-05 01:24:11,404 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=name, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,405 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property name with lazy=false
2012-11-05 01:24:11,406 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for name
2012-11-05 01:24:11,406 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property name
2012-11-05 01:24:11,406 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=street, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,407 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property street with lazy=false
2012-11-05 01:24:11,407 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for street
2012-11-05 01:24:11,408 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property street
2012-11-05 01:24:11,408 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=zip, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,409 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property zip with lazy=false
2012-11-05 01:24:11,409 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for zip
2012-11-05 01:24:11,409 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property zip
2012-11-05 01:24:11,412 [main] DEBUG org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:530) - Binding entity from annotated class: com.emo.sample.domain.order.Order
2012-11-05 01:24:11,413 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2012-11-05 01:24:11,413 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) - Import with entity name Order
2012-11-05 01:24:11,414 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:534) - Bind entity com.emo.sample.domain.order.Order on table SalesOrder
2012-11-05 01:24:11,440 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=orderCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,441 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property orderCode with lazy=false
2012-11-05 01:24:11,441 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for orderCode
2012-11-05 01:24:11,442 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property orderCode
2012-11-05 01:24:11,442 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=forCustomerCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,443 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property forCustomerCode with lazy=false
2012-11-05 01:24:11,443 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for forCustomerCode
2012-11-05 01:24:11,443 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property forCustomerCode
2012-11-05 01:24:11,445 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='', mappedBy=''}
2012-11-05 01:24:11,445 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=lines, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,448 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=null, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,472 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=element, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,475 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=lines_KEY, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,477 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='lines_KEY', referencedColumn='null', mappedBy='null'}
2012-11-05 01:24:11,480 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
2012-11-05 01:24:11,480 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
2012-11-05 01:24:11,481 [main] DEBUG org.hibernate.cfg.annotations.CollectionBinder.bind(CollectionBinder.java:402) - Collection role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:11,487 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property lines
2012-11-05 01:24:11,487 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=state, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,488 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property state with lazy=false
2012-11-05 01:24:11,491 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for state
2012-11-05 01:24:11,492 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property state
2012-11-05 01:24:11,492 [main] DEBUG org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:530) - Binding entity from annotated class: com.emo.sample.domain.order.OrderLine
2012-11-05 01:24:11,493 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2012-11-05 01:24:11,493 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) - Import with entity name OrderLine
2012-11-05 01:24:11,494 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:534) - Bind entity com.emo.sample.domain.order.OrderLine on table OrderLine
2012-11-05 01:24:11,501 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=id, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,502 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property internalId with lazy=false
2012-11-05 01:24:11,502 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for internalId
2012-11-05 01:24:11,502 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property internalId
2012-11-05 01:24:11,503 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=item, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,503 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property item with lazy=false
2012-11-05 01:24:11,504 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for item
2012-11-05 01:24:11,504 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property item
2012-11-05 01:24:11,505 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=lineId, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,505 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property lineId with lazy=false
2012-11-05 01:24:11,506 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for lineId
2012-11-05 01:24:11,506 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property lineId
2012-11-05 01:24:11,507 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=price, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,511 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=currencyCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,512 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property currencyCode with lazy=false
2012-11-05 01:24:11,513 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for currencyCode
2012-11-05 01:24:11,513 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property currencyCode
2012-11-05 01:24:11,514 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=price, insertable=true, updatable=true, unique=false}
2012-11-05 01:24:11,514 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property price with lazy=false
2012-11-05 01:24:11,515 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for price
2012-11-05 01:24:11,515 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property price
2012-11-05 01:24:11,515 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property price
2012-11-05 01:24:11,517 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for clientCode
2012-11-05 01:24:11,517 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for city
2012-11-05 01:24:11,518 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for countryCode
2012-11-05 01:24:11,518 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for name
2012-11-05 01:24:11,518 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for street
2012-11-05 01:24:11,519 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for zip
2012-11-05 01:24:11,519 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for orderCode
2012-11-05 01:24:11,519 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for forCustomerCode
2012-11-05 01:24:11,519 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for state
2012-11-05 01:24:11,520 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for internalId
2012-11-05 01:24:11,520 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for item
2012-11-05 01:24:11,520 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for lineId
2012-11-05 01:24:11,521 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for currencyCode
2012-11-05 01:24:11,521 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for price
2012-11-05 01:24:11,522 [main] DEBUG org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1403) - Processing fk mappings (*ToOne and JoinedSubclass)
2012-11-05 01:24:11,524 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1579) - Processing extends queue
2012-11-05 01:24:11,525 [main] DEBUG org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1633) - Processing extends queue
2012-11-05 01:24:11,525 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1582) - Processing collection mappings
2012-11-05 01:24:11,525 [main] DEBUG org.hibernate.cfg.CollectionSecondPass.doSecondPass(CollectionSecondPass.java:64) - Second pass for collection: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:11,526 [main] DEBUG org.hibernate.cfg.annotations.CollectionBinder.bindOneToManySecondPass(CollectionBinder.java:761) - Binding a OneToMany: com.emo.sample.domain.order.Order.lines through a foreign key
2012-11-05 01:24:11,527 [main] DEBUG org.hibernate.cfg.annotations.CollectionBinder.bindOneToManySecondPass(CollectionBinder.java:790) - Mapping collection: com.emo.sample.domain.order.Order.lines -> OrderLine
2012-11-05 01:24:11,533 [main] DEBUG org.hibernate.cfg.CollectionSecondPass.doSecondPass(CollectionSecondPass.java:80) - Mapped collection key: lines_orderCode, one-to-many: com.emo.sample.domain.order.OrderLine
2012-11-05 01:24:11,533 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1592) - Processing native query and ResultSetMapping mappings
2012-11-05 01:24:11,534 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1600) - Processing association property references
2012-11-05 01:24:11,534 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1622) - Processing foreign key constraints
2012-11-05 01:24:11,534 [main] DEBUG org.hibernate.cfg.Configuration.secondPassCompileForeignKeys(Configuration.java:1690) - Resolving reference to class: com.emo.sample.domain.order.Order
2012-11-05 01:24:11,578 [main] INFO  org.hibernate.service.jdbc.connections.internal.ConnectionProviderInitiator.instantiateExplicitConnectionProvider(ConnectionProviderInitiator.java:188) - HHH000130: Instantiating explicit connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
2012-11-05 01:24:11,628 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:121) - Database ->
       name : HSQL Database Engine
    version : 2.2.8
      major : 2
      minor : 2
2012-11-05 01:24:11,629 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:127) - Driver ->
       name : HSQL Database Engine Driver
    version : 2.2.8
      major : 2
      minor : 2
2012-11-05 01:24:11,629 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:133) - JDBC version : 4.0
2012-11-05 01:24:11,655 [main] INFO  org.hibernate.dialect.Dialect.<init>(Dialect.java:122) - HHH000400: Using dialect: org.hibernate.dialect.HSQLDialect
2012-11-05 01:24:11,699 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:100) - Automatic flush during beforeCompletion(): disabled
2012-11-05 01:24:11,700 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:106) - Automatic session close at end of transaction: disabled
2012-11-05 01:24:11,700 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:117) - JDBC batch size: 15
2012-11-05 01:24:11,701 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:123) - JDBC batch updates for versioned data: disabled
2012-11-05 01:24:11,701 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:133) - Scrollable result sets: enabled
2012-11-05 01:24:11,701 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:139) - Wrap result sets: disabled
2012-11-05 01:24:11,702 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:145) - JDBC3 getGeneratedKeys(): enabled
2012-11-05 01:24:11,702 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:157) - Connection release mode: auto
2012-11-05 01:24:11,702 [main] INFO  org.hibernate.engine.transaction.internal.TransactionFactoryInitiator.initiateService(TransactionFactoryInitiator.java:73) - HHH000268: Transaction strategy: org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory
2012-11-05 01:24:11,707 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:194) - Default batch fetch size: 1
2012-11-05 01:24:11,708 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:200) - Generate SQL with comments: disabled
2012-11-05 01:24:11,708 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:206) - Order SQL updates by primary key: disabled
2012-11-05 01:24:11,708 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:212) - Order SQL inserts for batching: disabled
2012-11-05 01:24:11,709 [main] DEBUG org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:443) - Query translator: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
2012-11-05 01:24:11,712 [main] INFO  org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:48) - HHH000397: Using ASTQueryTranslatorFactory
2012-11-05 01:24:11,713 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:222) - Query language substitutions: {}
2012-11-05 01:24:11,714 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:228) - JPA-QL strict compliance: enabled
2012-11-05 01:24:11,714 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:236) - Second-level cache: enabled
2012-11-05 01:24:11,715 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:242) - Query cache: disabled
2012-11-05 01:24:11,715 [main] DEBUG org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:383) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2012-11-05 01:24:11,717 [main] DEBUG org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:393) - org.hibernate.cache.internal.NoCachingRegionFactory did not provide constructor accepting java.util.Properties; attempting no-arg constructor.
2012-11-05 01:24:11,717 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:257) - Optimize cache for minimal puts: disabled
2012-11-05 01:24:11,718 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:272) - Structured second-level cache entries: disabled
2012-11-05 01:24:11,718 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:281) - Statistics: disabled
2012-11-05 01:24:11,718 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:287) - Deleted entity synthetic identifier rollback: disabled
2012-11-05 01:24:11,719 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:311) - Default entity-mode: pojo
2012-11-05 01:24:11,719 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:317) - Named query checking : enabled
2012-11-05 01:24:11,719 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:323) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2012-11-05 01:24:11,720 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:329) - multi-tenancy strategy : NONE
2012-11-05 01:24:11,734 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:226) - Building session factory
2012-11-05 01:24:11,747 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:276) - Session factory constructed with filter configurations : {}
2012-11-05 01:24:11,748 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:277) - Instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=C:\Program Files\Java\jre7\bin, java.vm.version=21.1-b02, java.vm.vendor=Oracle Corporation, java.vendor.url=http://java.oracle.com/, path.separator=;, java.vm.name=Java HotSpot(TM) Client VM, file.encoding.pkg=sun.io, user.script=, user.country=FR, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=C:\Users\Cedroic\workspaces\smsoip\ws-skeleton, javax.persistence.sharedCache.mode=UNSPECIFIED, java.runtime.version=1.7.0_01-b08, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=C:\Program Files\Java\jre7\lib\endorsed, os.arch=x86, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\Cedroic\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, user.variant=, os.name=Windows 7, sun.jnu.encoding=Cp1252, java.library.path=C:\Program Files\Java\jre7\bin;C:\windows\Sun\Java\bin;C:\windows\system32;C:\windows;C:/Program Files/Java/jre7/bin/client;C:/Program Files/Java/jre7/bin;C:/Program Files/Java/jre7/lib/i386;D:\vertx\vert.x-1.2.3-final\bin;D:\apache-maven-3.0.4\bin;D:\spring-roo-1.2.0.RC1\bin;C:\windows\system32;C:\windows;C:\windows\System32\Wbem;C:\windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files\Mercurial\;C:\Program Files\Git\cmd;D:\springsource\sts-2.8.1.RELEASE;;., hibernate.connection.datasource=org.springframework.jdbc.datasource.SimpleDriverDataSource@1c12ee7, java.specification.name=Java Platform API Specification, java.class.version=51.0, sun.management.compiler=HotSpot Client Compiler, hibernate.transaction.factory_class=org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory, os.version=6.1, user.home=C:\Users\Cedroic, user.timezone=Europe/Paris, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.7, file.encoding=Cp1252, user.name=Cedroic, java.class.path=C:\Users\Cedroic\workspaces\smsoip\ws-skeleton\target\test-classes;C:\Users\Cedroic\workspaces\smsoip\ws-skeleton\target\classes;C:\Users\Cedroic\.m2\repository\junit\junit\4.10\junit-4.10.jar;C:\Users\Cedroic\.m2\repository\org\hamcrest\hamcrest-core\1.1\hamcrest-core-1.1.jar;C:\Users\Cedroic\.m2\repository\com\jayway\restassured\rest-assured\1.6.2\rest-assured-1.6.2.jar;C:\Users\Cedroic\.m2\repository\org\codehaus\groovy\groovy\1.8.4\groovy-1.8.4.jar;C:\Users\Cedroic\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Cedroic\.m2\repository\asm\asm-commons\3.2\asm-commons-3.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm-util\3.2\asm-util-3.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm-analysis\3.2\asm-analysis-3.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm-tree\3.2\asm-tree-3.2.jar;C:\Users\Cedroic\.m2\repository\org\apache\httpcomponents\httpclient\4.1.3\httpclient-4.1.3.jar;C:\Users\Cedroic\.m2\repository\org\apache\httpcomponents\httpcore\4.1.4\httpcore-4.1.4.jar;C:\Users\Cedroic\.m2\repository\commons-codec\commons-codec\1.4\commons-codec-1.4.jar;C:\Users\Cedroic\.m2\repository\org\apache\httpcomponents\httpmime\4.1.3\httpmime-4.1.3.jar;C:\Users\Cedroic\.m2\repository\org\hamcrest\hamcrest-library\1.2.1\hamcrest-library-1.2.1.jar;C:\Users\Cedroic\.m2\repository\commons-collections\commons-collections\3.2.1\commons-collections-3.2.1.jar;C:\Users\Cedroic\.m2\repository\org\apache\commons\commons-lang3\3.1\commons-lang3-3.1.jar;C:\Users\Cedroic\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar;C:\Users\Cedroic\.m2\repository\org\hamcrest\hamcrest-all\1.3\hamcrest-all-1.3.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-core\3.1.2.RELEASE\spring-core-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-asm\3.1.2.RELEASE\spring-asm-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\commons-logging\commons-logging\1.1.1\commons-logging-1.1.1.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-context\3.1.2.RELEASE\spring-context-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-aop\3.1.2.RELEASE\spring-aop-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-beans\3.1.2.RELEASE\spring-beans-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-expression\3.1.2.RELEASE\spring-expression-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-web\3.1.2.RELEASE\spring-web-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-tx\3.1.2.RELEASE\spring-tx-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-orm\3.1.2.RELEASE\spring-orm-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-jdbc\3.1.2.RELEASE\spring-jdbc-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-test\3.1.2.RELEASE\spring-test-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\hibernate-entitymanager\4.1.1.Final\hibernate-entitymanager-4.1.1.Final.jar;C:\Users\Cedroic\.m2\repository\org\jboss\logging\jboss-logging\3.1.0.GA\jboss-logging-3.1.0.GA.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\hibernate-core\4.1.1.Final\hibernate-core-4.1.1.Final.jar;C:\Users\Cedroic\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.1_spec\1.0.0.Final\jboss-transaction-api_1.1_spec-1.0.0.Final.jar;C:\Users\Cedroic\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Cedroic\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;C:\Users\Cedroic\.m2\repository\org\javassist\javassist\3.15.0-GA\javassist-3.15.0-GA.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.1.Final\hibernate-commons-annotations-4.0.1.Final.jar;C:\Users\Cedroic\.m2\repository\net\sf\oval\oval\1.81\oval-1.81.jar;C:\Users\Cedroic\.m2\repository\org\hsqldb\hsqldb\2.2.8\hsqldb-2.2.8.jar;C:\Users\Cedroic\.m2\repository\org\slf4j\slf4j-log4j12\1.6.6\slf4j-log4j12-1.6.6.jar;C:\Users\Cedroic\.m2\repository\org\slf4j\slf4j-api\1.6.6\slf4j-api-1.6.6.jar;C:\Users\Cedroic\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Cedroic\.m2\repository\cglib\cglib\2.2.2\cglib-2.2.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm\3.3.1\asm-3.3.1.jar;C:\Users\Cedroic\.m2\repository\org\springframework\data\spring-data-jpa\1.1.1.RELEASE\spring-data-jpa-1.1.1.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\data\spring-data-commons-core\1.3.2.RELEASE\spring-data-commons-core-1.3.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\slf4j\jcl-over-slf4j\1.6.1\jcl-over-slf4j-1.6.1.jar;C:\Users\Cedroic\.m2\repository\org\aspectj\aspectjrt\1.6.12\aspectjrt-1.6.12.jar;C:\Users\Cedroic\.m2\repository\com\yammer\metrics\metrics-core\2.1.3\metrics-core-2.1.3.jar;C:\Users\Cedroic\.m2\repository\javolution\javolution\5.5.1\javolution-5.5.1.jar;C:\Users\Cedroic\.m2\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;C:\Users\Cedroic\.m2\repository\it\unimi\dsi\fastutil\6.4.1\fastutil-6.4.1.jar;C:\Users\Cedroic\.m2\repository\net\minidev\json-smart\2.0-RC2\json-smart-2.0-RC2.jar;C:\Users\Cedroic\.m2\repository\net\minidev\asm\1.0-RC1\asm-1.0-RC1.jar;C:\Users\Cedroic\.m2\repository\com\google\guava\guava\10.0.1\guava-10.0.1.jar;C:\Users\Cedroic\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar;C:\Users\Cedroic\.m2\repository\com\googlecode\disruptor\disruptor\2.10.3\disruptor-2.10.3.jar;C:\Users\Cedroic\.m2\repository\com\caucho\resin\4.0.30\resin-4.0.30.jar;C:\Users\Cedroic\.m2\repository\com\caucho\resin-javaee16\4.0.30\resin-javaee16-4.0.30.jar;C:\Users\Cedroic\.m2\repository\javax\activation\activation\1.1\activation-1.1.jar;C:\Users\Cedroic\.m2\repository\javax\annotation\jsr250-api\1.0\jsr250-api-1.0.jar;C:\Users\Cedroic\.m2\repository\javax\mail\mail\1.4\mail-1.4.jar;C:\Users\Cedroic\.m2\repository\com\caucho\resin-hessian\4.0.30\resin-hessian-4.0.30.jar;C:\Users\Cedroic\.m2\repository\commons-beanutils\commons-beanutils\1.8.3\commons-beanutils-1.8.3.jar;C:\Users\Cedroic\.m2\repository\org\apache\wicket\wicket-core\6.2.0\wicket-core-6.2.0.jar;C:\Users\Cedroic\.m2\repository\org\apache\wicket\wicket-util\6.2.0\wicket-util-6.2.0.jar;C:\Users\Cedroic\.m2\repository\org\apache\wicket\wicket-request\6.2.0\wicket-request-6.2.0.jar;/D:/springsource/sts-2.8.1.RELEASE/configuration/org.eclipse.osgi/bundles/418/1/.cp/;/D:/springsource/sts-2.8.1.RELEASE/configuration/org.eclipse.osgi/bundles/416/1/.cp/;/D:/springsource/sts-2.8.1.RELEASE/configuration/org.eclipse.osgi/bundles/417/1/.cp/, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, javax.persistence.validation.mode=AUTO, java.vm.specification.version=1.7, sun.arch.data.model=32, java.home=C:\Program Files\Java\jre7, sun.java.command=org.eclipse.jdt.internal.junit.runner.RemoteTestRunner -version 3 -port 56948 -testLoaderClass org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader -loaderpluginname org.eclipse.jdt.junit4.runtime -test com.emo.acceptances.NewOrderTest:holdLines, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Oracle Corporation, user.language=fr, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, sharing, java.version=1.7.0_01, hibernate.transaction.flush_before_completion=false, java.ext.dirs=C:\Program Files\Java\jre7\lib\ext;C:\windows\Sun\Java\lib\ext, sun.boot.class.path=C:\Program Files\Java\jre7\lib\resources.jar;C:\Program Files\Java\jre7\lib\rt.jar;C:\Program Files\Java\jre7\lib\sunrsasign.jar;C:\Program Files\Java\jre7\lib\jsse.jar;C:\Program Files\Java\jre7\lib\jce.jar;C:\Program Files\Java\jre7\lib\charsets.jar;C:\Program Files\Java\jre7\classes, java.vendor=Oracle Corporation, file.separator=\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=}
2012-11-05 01:24:11,882 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:107) - Setting dialect [org.hibernate.dialect.HSQLDialect]
2012-11-05 01:24:11,883 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:107) - Setting dialect [org.hibernate.dialect.HSQLDialect]
2012-11-05 01:24:11,884 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:107) - Setting dialect [org.hibernate.dialect.HSQLDialect]
2012-11-05 01:24:12,012 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3381) - Static SQL for entity: com.emo.sample.domain.order.Order
2012-11-05 01:24:12,013 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3383) -  Version select: select orderCode from SalesOrder where orderCode =?
2012-11-05 01:24:12,013 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3384) -  Snapshot select: select order_.orderCode, order_.forCustomerCode as forCusto2_1_, order_.state as state1_ from SalesOrder order_ where order_.orderCode=?
2012-11-05 01:24:12,014 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3386) -  Insert 0: insert into SalesOrder (forCustomerCode, state, orderCode) values (?, ?, ?)
2012-11-05 01:24:12,014 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3387) -  Update 0: update SalesOrder set forCustomerCode=?, state=? where orderCode=?
2012-11-05 01:24:12,014 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3388) -  Delete 0: delete from SalesOrder where orderCode=?
2012-11-05 01:24:12,020 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3381) - Static SQL for entity: com.emo.sample.domain.Client
2012-11-05 01:24:12,020 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3383) -  Version select: select clientCode from Client where clientCode =?
2012-11-05 01:24:12,020 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3384) -  Snapshot select: select client_.clientCode, client_.city as city0_, client_.countryCode as countryC3_0_, client_.name as name0_, client_.street as street0_, client_.zip as zip0_ from Client client_ where client_.clientCode=?
2012-11-05 01:24:12,021 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3386) -  Insert 0: insert into Client (city, countryCode, name, street, zip, clientCode) values (?, ?, ?, ?, ?, ?)
2012-11-05 01:24:12,021 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3387) -  Update 0: update Client set city=?, countryCode=?, name=?, street=?, zip=? where clientCode=?
2012-11-05 01:24:12,021 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3388) -  Delete 0: delete from Client where clientCode=?
2012-11-05 01:24:12,028 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3381) - Static SQL for entity: com.emo.sample.domain.order.OrderLine
2012-11-05 01:24:12,028 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3383) -  Version select: select id from OrderLine where id =?
2012-11-05 01:24:12,029 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3384) -  Snapshot select: select orderline_.id, orderline_.item as item2_, orderline_.lineId as lineId2_, orderline_.currencyCode as currency4_2_, orderline_.price as price2_ from OrderLine orderline_ where orderline_.id=?
2012-11-05 01:24:12,029 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3386) -  Insert 0: insert into OrderLine (item, lineId, currencyCode, price, id) values (?, ?, ?, ?, ?)
2012-11-05 01:24:12,029 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3387) -  Update 0: update OrderLine set item=?, lineId=?, currencyCode=?, price=? where id=?
2012-11-05 01:24:12,030 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3388) -  Delete 0: delete from OrderLine where id=?
2012-11-05 01:24:12,030 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3390) -  Identity insert: insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:24:12,043 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:613) - Static SQL for collection: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:12,043 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:614) -  Row insert: update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:24:12,044 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:616) -  Row delete: update OrderLine set lines_orderCode=null where lines_orderCode=? and id=?
2012-11-05 01:24:12,044 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:617) -  One-shot delete: update OrderLine set lines_orderCode=null where lines_orderCode=?
2012-11-05 01:24:12,077 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [NONE]: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:24:12,078 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [READ]: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:24:12,078 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [UPGRADE]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:24:12,079 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [UPGRADE_NOWAIT]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:24:12,080 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [FORCE]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:24:12,080 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [PESSIMISTIC_READ]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:24:12,081 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [PESSIMISTIC_WRITE]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:24:12,082 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [PESSIMISTIC_FORCE_INCREMENT]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:24:12,083 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [OPTIMISTIC]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:24:12,083 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [OPTIMISTIC_FORCE_INCREMENT]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:24:12,094 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_MERGE on entity com.emo.sample.domain.order.Order: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:24:12,094 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_REFRESH on entity com.emo.sample.domain.order.Order: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:24:12,095 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [NONE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,096 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [READ]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,101 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [UPGRADE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,102 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [UPGRADE_NOWAIT]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,102 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [FORCE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,103 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [PESSIMISTIC_READ]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,103 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [PESSIMISTIC_WRITE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,104 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [PESSIMISTIC_FORCE_INCREMENT]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,105 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [OPTIMISTIC]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,105 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [OPTIMISTIC_FORCE_INCREMENT]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,106 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_MERGE on entity com.emo.sample.domain.Client: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,107 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_REFRESH on entity com.emo.sample.domain.Client: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:24:12,107 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [NONE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,108 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [READ]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,108 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [UPGRADE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,109 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [UPGRADE_NOWAIT]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,110 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [FORCE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,110 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [PESSIMISTIC_READ]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,111 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [PESSIMISTIC_WRITE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,111 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [PESSIMISTIC_FORCE_INCREMENT]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,113 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [OPTIMISTIC]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,114 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [OPTIMISTIC_FORCE_INCREMENT]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,115 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_MERGE on entity com.emo.sample.domain.order.OrderLine: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,115 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_REFRESH on entity com.emo.sample.domain.order.OrderLine: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:24:12,125 [main] DEBUG org.hibernate.loader.collection.OneToManyLoader.<init>(OneToManyLoader.java:82) - Static select for one-to-many com.emo.sample.domain.order.Order.lines: select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:24:12,128 [main] DEBUG org.hibernate.internal.SessionFactoryRegistry.<init>(SessionFactoryRegistry.java:62) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@1d4ae9
2012-11-05 01:24:12,129 [main] DEBUG org.hibernate.internal.SessionFactoryRegistry.addSessionFactory(SessionFactoryRegistry.java:75) - Registering SessionFactory: 6572c93f-d9c0-4433-81ac-bc4f3f6e63b2 (<unnamed>)
2012-11-05 01:24:12,129 [main] DEBUG org.hibernate.internal.SessionFactoryRegistry.addSessionFactory(SessionFactoryRegistry.java:82) - Not binding SessionFactory to JNDI, no JNDI name configured
2012-11-05 01:24:12,130 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:487) - Instantiated session factory
2012-11-05 01:24:12,130 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:1119) - Checking 0 named HQL queries
2012-11-05 01:24:12,130 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:1142) - Checking 0 named SQL queries
2012-11-05 01:24:12,138 [main] DEBUG org.hibernate.stat.internal.StatisticsInitiator.initiateServiceInternal(StatisticsInitiator.java:110) - Statistics initialized [enabled=false]
2012-11-05 01:24:12,209 [main] DEBUG org.hibernate.ejb.internal.EntityManagerFactoryRegistry.<init>(EntityManagerFactoryRegistry.java:55) - Initializing EntityManagerFactoryRegistry : org.hibernate.ejb.internal.EntityManagerFactoryRegistry@184ea5e
2012-11-05 01:24:12,210 [main] DEBUG org.hibernate.ejb.internal.EntityManagerFactoryRegistry.addEntityManagerFactory(EntityManagerFactoryRegistry.java:65) - Registering EntityManagerFactory: sample 
2012-11-05 01:24:12,556 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750525
2012-11-05 01:24:12,568 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750525
2012-11-05 01:24:12,654 [main] DEBUG org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:106) - Adding transactional method 'handle' with attribute: PROPAGATION_REQUIRES_NEW,ISOLATION_DEFAULT; ''
2012-11-05 01:24:12,679 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750526
2012-11-05 01:24:12,681 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750526
2012-11-05 01:24:12,691 [main] DEBUG org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:106) - Adding transactional method 'handle' with attribute: PROPAGATION_REQUIRES_NEW,ISOLATION_DEFAULT; ''
2012-11-05 01:24:12,913 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750529
2012-11-05 01:24:12,917 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:24:12,917 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:24:12,918 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:24:12,919 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:24:12,919 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:24:12,983 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:265) - parse() - HQL: select count(*) from com.emo.sample.domain.order.Order x where x.orderCode = :id
2012-11-05 01:24:12,990 [main] DEBUG org.hibernate.hql.internal.ast.HqlParser.weakKeywords(HqlParser.java:347) - weakKeywords() : new LT(1) token - ["order",<126> previously: <41>,line=1,col=44,possibleID=true]
2012-11-05 01:24:12,990 [main] DEBUG org.hibernate.hql.internal.ast.HqlParser.weakKeywords(HqlParser.java:347) - weakKeywords() : new LT(1) token - ["Order",<126> previously: <41>,line=1,col=50,possibleID=true]
2012-11-05 01:24:13,007 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:283) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  |  \-[IDENT] Node: 'emo'
    |  |     |  |  |  |  \-[IDENT] Node: 'sample'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'order'
    |  |     |  \-[IDENT] Node: 'Order'
    |  |     \-[ALIAS] Node: 'x'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'x'
          |  \-[IDENT] Node: 'orderCode'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'id'

2012-11-05 01:24:13,007 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:24:13,045 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:109) - select << begin [level=1, statement=select]
2012-11-05 01:24:13,074 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromElement.doInitialize(FromElement.java:157) - FromClause{level=1} : com.emo.sample.domain.order.Order (x) -> order0_
2012-11-05 01:24:13,082 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : x -> order0_.orderCode
2012-11-05 01:24:13,084 [main] DEBUG org.hibernate.hql.internal.ast.tree.DotNode.getDataType(DotNode.java:599) - getDataType() : orderCode -> org.hibernate.type.StringType@15d3072
2012-11-05 01:24:13,085 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : x.orderCode -> order0_.orderCode
2012-11-05 01:24:13,089 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:113) - select : finishing up [level=1, statement=select]
2012-11-05 01:24:13,090 [main] DEBUG org.hibernate.hql.internal.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:631) - processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} SalesOrder order0_ ) ( where ( = ( order0_.orderCode order0_.orderCode orderCode ) ? ) ) )
2012-11-05 01:24:13,207 [main] DEBUG org.hibernate.hql.internal.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:175) - Using FROM fragment [SalesOrder order0_]
2012-11-05 01:24:13,208 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:117) - select >> end [level=1, statement=select]
2012-11-05 01:24:13,210 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:252) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SalesOrder)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[x], fromElementByTableAlias=[order0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SalesOrder order0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=x,role=null,tableName=SalesOrder,tableAlias=order0_,origin=null,columns={,className=com.emo.sample.domain.order.Order}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'order0_.orderCode' {propertyName=orderCode,dereferenceType=ALL,propertyPath=orderCode,path=x.orderCode,tableAlias=order0_,className=com.emo.sample.domain.order.Order,classAlias=x}
          |  +-[ALIAS_REF] IdentNode: 'order0_.orderCode' {alias=x, className=com.emo.sample.domain.order.Order, tableAlias=order0_}
          |  \-[IDENT] IdentNode: 'orderCode' {originalText=orderCode}
          \-[NAMED_PARAM] ParameterNode: '?' {name=id, expectedType=org.hibernate.type.StringType@15d3072}

2012-11-05 01:24:13,210 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:24:13,221 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:235) - HQL: select count(*) from com.emo.sample.domain.order.Order x where x.orderCode = :id
2012-11-05 01:24:13,221 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:236) - SQL: select count(*) as col_0_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:24:13,221 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:24:13,277 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select count(*) as col_0_0_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:24:13,324 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:24:13,325 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: 
2012-11-05 01:24:13,330 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:24:13,332 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:24:13,332 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:24:13,332 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:24:13,334 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:24:13,334 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:24:13,335 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:24:13,336 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750533
2012-11-05 01:24:13,337 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:24:13,337 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:24:13,338 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:24:13,338 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:24:13,339 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:24:13,360 [main] DEBUG org.hibernate.loader.Loader.loadEntity(Loader.java:2030) - Loading entity: [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,362 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:24:13,368 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:224) - No collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,369 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:24:13,369 [main] DEBUG org.hibernate.loader.Loader.loadEntity(Loader.java:2054) - Done entity load
2012-11-05 01:24:13,379 [main] DEBUG org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:131) - Generated identifier: 64b6de84-64d1-475e-ab16-3a8d2cf7b342, using strategy: org.hibernate.id.Assigned
2012-11-05 01:24:13,404 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:24:13,405 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:24:13,408 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:24:13,414 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342], was: [<unreferenced>] (initialized)
2012-11-05 01:24:13,417 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects
2012-11-05 01:24:13,417 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 1 (re)creations, 0 updates, 0 removals to 1 collections
2012-11-05 01:24:13,420 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:24:13,420 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=64b6de84-64d1-475e-ab16-3a8d2cf7b342, state=Draft, lines=[], forCustomerCode=28b643ad-c03f-40b9-8182-224b433f13b8}
2012-11-05 01:24:13,437 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into SalesOrder (forCustomerCode, state, orderCode) values (?, ?, ?)
2012-11-05 01:24:13,439 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.recreate(AbstractCollectionPersister.java:1149) - Inserting collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,439 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.recreate(AbstractCollectionPersister.java:1236) - Collection was empty
2012-11-05 01:24:13,441 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:24:13,441 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:24:13,442 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:24:13,442 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:24:13,442 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:24:13,442 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:24:13,445 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750534
2012-11-05 01:24:13,451 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:24:13,453 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:265) - parse() - HQL: select generatedAlias0 from com.emo.sample.domain.order.Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:24:13,454 [main] DEBUG org.hibernate.hql.internal.ast.HqlParser.weakKeywords(HqlParser.java:347) - weakKeywords() : new LT(1) token - ["order",<126> previously: <41>,line=1,col=51,possibleID=true]
2012-11-05 01:24:13,455 [main] DEBUG org.hibernate.hql.internal.ast.HqlParser.weakKeywords(HqlParser.java:347) - weakKeywords() : new LT(1) token - ["Order",<126> previously: <41>,line=1,col=57,possibleID=true]
2012-11-05 01:24:13,459 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:283) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  |  \-[IDENT] Node: 'emo'
    |  |     |  |  |  |  \-[IDENT] Node: 'sample'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'order'
    |  |     |  \-[IDENT] Node: 'Order'
    |  |     \-[ALIAS] Node: 'generatedAlias0'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'generatedAlias0'
          |  \-[IDENT] Node: 'orderCode'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'param0'

2012-11-05 01:24:13,459 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:24:13,460 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:109) - select << begin [level=1, statement=select]
2012-11-05 01:24:13,460 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromElement.doInitialize(FromElement.java:157) - FromClause{level=1} : com.emo.sample.domain.order.Order (generatedAlias0) -> order0_
2012-11-05 01:24:13,461 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : generatedAlias0 -> order0_.orderCode
2012-11-05 01:24:13,462 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : generatedAlias0 -> order0_.orderCode
2012-11-05 01:24:13,463 [main] DEBUG org.hibernate.hql.internal.ast.tree.DotNode.getDataType(DotNode.java:599) - getDataType() : orderCode -> org.hibernate.type.StringType@15d3072
2012-11-05 01:24:13,463 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : generatedAlias0.orderCode -> order0_.orderCode
2012-11-05 01:24:13,464 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:113) - select : finishing up [level=1, statement=select]
2012-11-05 01:24:13,464 [main] DEBUG org.hibernate.hql.internal.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:631) - processQuery() :  ( SELECT ( {select clause} order0_.orderCode ) ( FromClause{level=1} SalesOrder order0_ ) ( where ( = ( order0_.orderCode order0_.orderCode orderCode ) ? ) ) )
2012-11-05 01:24:13,466 [main] DEBUG org.hibernate.hql.internal.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:175) - Using FROM fragment [SalesOrder order0_]
2012-11-05 01:24:13,467 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:117) - select >> end [level=1, statement=select]
2012-11-05 01:24:13,468 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:252) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SalesOrder)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'order0_.orderCode as orderCode1_' {alias=generatedAlias0, className=com.emo.sample.domain.order.Order, tableAlias=order0_}
    |  \-[SQL_TOKEN] SqlFragment: 'order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[generatedAlias0], fromElementByTableAlias=[order0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SalesOrder order0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=SalesOrder,tableAlias=order0_,origin=null,columns={,className=com.emo.sample.domain.order.Order}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'order0_.orderCode' {propertyName=orderCode,dereferenceType=ALL,propertyPath=orderCode,path=generatedAlias0.orderCode,tableAlias=order0_,className=com.emo.sample.domain.order.Order,classAlias=generatedAlias0}
          |  +-[ALIAS_REF] IdentNode: 'order0_.orderCode' {alias=generatedAlias0, className=com.emo.sample.domain.order.Order, tableAlias=order0_}
          |  \-[IDENT] IdentNode: 'orderCode' {originalText=orderCode}
          \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=org.hibernate.type.StringType@15d3072}

2012-11-05 01:24:13,468 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:24:13,469 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:235) - HQL: select generatedAlias0 from com.emo.sample.domain.order.Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:24:13,470 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:236) - SQL: select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:24:13,470 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:24:13,484 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:24:13,485 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:24:13,485 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:24:13,487 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:24:13,488 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,492 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,493 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,494 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:24:13,496 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,503 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:24:13,504 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,507 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,508 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,508 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,509 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:24:13,509 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:24:13,509 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:24:13,510 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:24:13,522 [main] DEBUG org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:106) - Adding transactional method 'handle' with attribute: PROPAGATION_REQUIRES_NEW,ISOLATION_DEFAULT; ''
2012-11-05 01:24:13,523 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750535
2012-11-05 01:24:13,523 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:24:13,524 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:24:13,524 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:24:13,524 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:24:13,525 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:24:13,525 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:24:13,526 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:24:13,527 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:24:13,528 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,529 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,529 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,530 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:24:13,530 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,531 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:24:13,532 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,532 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,533 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,533 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,534 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:24:13,534 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:24:13,535 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:24:13,539 [main] DEBUG org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:202) - Executing identity-insert immediately
2012-11-05 01:24:13,541 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:24:13,547 [main] DEBUG org.hibernate.id.IdentifierGeneratorHelper.getGeneratedIdentity(IdentifierGeneratorHelper.java:93) - Natively generated identity: 1
2012-11-05 01:24:13,548 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:24:13,549 [main] DEBUG org.hibernate.engine.spi.CollectionEntry.preFlush(CollectionEntry.java:199) - Collection dirty: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,549 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342], was: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342] (initialized)
2012-11-05 01:24:13,551 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 0 insertions, 0 updates, 0 deletions to 2 objects
2012-11-05 01:24:13,551 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 1 updates, 0 removals to 1 collections
2012-11-05 01:24:13,551 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:24:13,552 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=1, price=component[currencyCode,price]{price=3.9, currencyCode=EUR}, item=boardgame, lineId=1}
2012-11-05 01:24:13,552 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=64b6de84-64d1-475e-ab16-3a8d2cf7b342, state=Draft, lines=[com.emo.sample.domain.order.OrderLine#1], forCustomerCode=28b643ad-c03f-40b9-8182-224b433f13b8}
2012-11-05 01:24:13,552 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1262) - Deleting rows of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,553 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1344) - No rows to delete
2012-11-05 01:24:13,553 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1369) - Inserting rows of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,554 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:24:13,558 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1444) - Done inserting rows: 1 inserted
2012-11-05 01:24:13,558 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:24:13,559 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:24:13,559 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:24:13,559 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:24:13,560 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:24:13,560 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:24:13,560 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750535
2012-11-05 01:24:13,561 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:24:13,561 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:24:13,562 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:24:13,562 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:24:13,562 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:24:13,563 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:24:13,564 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:24:13,565 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:24:13,565 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,566 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,566 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,567 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:24:13,567 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,568 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:24:13,570 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,570 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:24:13,571 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:24:13,574 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,575 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:24:13,575 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:24:13,576 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,576 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,577 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,577 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:24:13,577 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:24:13,578 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:24:13,578 [main] DEBUG org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:202) - Executing identity-insert immediately
2012-11-05 01:24:13,579 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:24:13,580 [main] DEBUG org.hibernate.id.IdentifierGeneratorHelper.getGeneratedIdentity(IdentifierGeneratorHelper.java:93) - Natively generated identity: 2
2012-11-05 01:24:13,581 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:24:13,581 [main] DEBUG org.hibernate.engine.spi.CollectionEntry.preFlush(CollectionEntry.java:199) - Collection dirty: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,582 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342], was: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342] (initialized)
2012-11-05 01:24:13,582 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2012-11-05 01:24:13,583 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 1 updates, 0 removals to 1 collections
2012-11-05 01:24:13,583 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:24:13,583 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=2, price=component[currencyCode,price]{price=2.55, currencyCode=EUR}, item=candy bag, lineId=2}
2012-11-05 01:24:13,583 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=1, price=component[currencyCode,price]{price=3.9, currencyCode=EUR}, item=boardgame, lineId=1}
2012-11-05 01:24:13,584 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=64b6de84-64d1-475e-ab16-3a8d2cf7b342, state=Draft, lines=[com.emo.sample.domain.order.OrderLine#1, com.emo.sample.domain.order.OrderLine#2], forCustomerCode=28b643ad-c03f-40b9-8182-224b433f13b8}
2012-11-05 01:24:13,584 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1262) - Deleting rows of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,584 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1344) - No rows to delete
2012-11-05 01:24:13,585 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1369) - Inserting rows of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,585 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:24:13,586 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1444) - Done inserting rows: 1 inserted
2012-11-05 01:24:13,587 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:24:13,587 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:24:13,587 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:24:13,588 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:24:13,588 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:24:13,588 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:24:13,589 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750535
2012-11-05 01:24:13,589 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:24:13,590 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:24:13,590 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:24:13,590 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:24:13,591 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:24:13,591 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:24:13,592 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:24:13,594 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:24:13,594 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,595 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,596 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,596 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:24:13,596 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,597 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:24:13,598 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,599 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:24:13,599 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:24:13,600 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,601 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 1
2012-11-05 01:24:13,601 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:24:13,602 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,602 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:24:13,603 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:24:13,604 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:24:13,604 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:24:13,606 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,606 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,606 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,607 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:24:13,607 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:24:13,607 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:24:13,608 [main] DEBUG org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:202) - Executing identity-insert immediately
2012-11-05 01:24:13,609 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:24:13,610 [main] DEBUG org.hibernate.id.IdentifierGeneratorHelper.getGeneratedIdentity(IdentifierGeneratorHelper.java:93) - Natively generated identity: 3
2012-11-05 01:24:13,611 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:24:13,611 [main] DEBUG org.hibernate.engine.spi.CollectionEntry.preFlush(CollectionEntry.java:199) - Collection dirty: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,612 [main] DEBUG org.hibernate.engine.internal.Collections.processReachableCollection(Collections.java:191) - Collection found: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342], was: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342] (initialized)
2012-11-05 01:24:13,612 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 0 insertions, 0 updates, 0 deletions to 4 objects
2012-11-05 01:24:13,613 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 1 updates, 0 removals to 1 collections
2012-11-05 01:24:13,613 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:24:13,613 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=2, price=component[currencyCode,price]{price=2.55, currencyCode=EUR}, item=candy bag, lineId=2}
2012-11-05 01:24:13,614 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=1, price=component[currencyCode,price]{price=3.9, currencyCode=EUR}, item=boardgame, lineId=1}
2012-11-05 01:24:13,614 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.OrderLine{internalId=3, price=component[currencyCode,price]{price=499.0, currencyCode=EUR}, item=led tv, lineId=3}
2012-11-05 01:24:13,614 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.order.Order{orderCode=64b6de84-64d1-475e-ab16-3a8d2cf7b342, state=Draft, lines=[com.emo.sample.domain.order.OrderLine#1, com.emo.sample.domain.order.OrderLine#2, com.emo.sample.domain.order.OrderLine#3], forCustomerCode=28b643ad-c03f-40b9-8182-224b433f13b8}
2012-11-05 01:24:13,614 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1262) - Deleting rows of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,615 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.deleteRows(AbstractCollectionPersister.java:1344) - No rows to delete
2012-11-05 01:24:13,615 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1369) - Inserting rows of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,616 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:24:13,616 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.insertRows(AbstractCollectionPersister.java:1444) - Done inserting rows: 1 inserted
2012-11-05 01:24:13,617 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:24:13,617 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:24:13,618 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:24:13,618 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:24:13,618 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:24:13,618 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:24:13,619 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520750536
2012-11-05 01:24:13,620 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Order as generatedAlias0 where generatedAlias0.orderCode=:param0
2012-11-05 01:24:13,620 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:24:13,621 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:24:13,622 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select order0_.orderCode as orderCode1_, order0_.forCustomerCode as forCusto2_1_, order0_.state as state1_ from SalesOrder order0_ where order0_.orderCode=? limit ?
2012-11-05 01:24:13,623 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:24:13,628 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,629 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,630 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.Order#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,630 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:24:13,630 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2154) - Loading collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,631 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:24:13,633 [main] DEBUG org.hibernate.loader.Loader.handleEmptyCollections(Loader.java:1230) - Result set contains (possibly empty) collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,633 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:24:13,634 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:24:13,634 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,635 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 1
2012-11-05 01:24:13,635 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:24:13,636 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,636 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 2
2012-11-05 01:24:13,637 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.order.OrderLine#3]
2012-11-05 01:24:13,637 [main] DEBUG org.hibernate.loader.Loader.readCollectionElement(Loader.java:1164) - Found row of collection: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,638 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:24:13,638 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#1]
2012-11-05 01:24:13,639 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:24:13,639 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#2]
2012-11-05 01:24:13,640 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.order.OrderLine#3]
2012-11-05 01:24:13,640 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.order.OrderLine#3]
2012-11-05 01:24:13,641 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:229) - 1 collections were found in result set for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,641 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollection(CollectionLoadContext.java:266) - Collection fully initialized: [com.emo.sample.domain.order.Order.lines#64b6de84-64d1-475e-ab16-3a8d2cf7b342]
2012-11-05 01:24:13,641 [main] DEBUG org.hibernate.engine.loading.internal.CollectionLoadContext.endLoadingCollections(CollectionLoadContext.java:236) - 1 collections initialized for role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:24:13,642 [main] DEBUG org.hibernate.loader.Loader.loadCollection(Loader.java:2174) - Done loading collection
2012-11-05 01:24:13,642 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:24:13,643 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:24:13,643 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:24:13,651 [Thread-1] DEBUG org.hibernate.internal.SessionFactoryImpl.close(SessionFactoryImpl.java:1408) - HHH000031: Closing
2012-11-05 01:24:13,654 [Thread-1] DEBUG org.hibernate.ejb.internal.EntityManagerFactoryRegistry.removeEntityManagerFactory(EntityManagerFactoryRegistry.java:107) - Remove: name=sample
2012-11-05 01:25:04,016 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@16bded0
2012-11-05 01:25:04,021 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@16bded0
2012-11-05 01:25:04,021 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@16bded0
2012-11-05 01:25:04,024 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@639310
2012-11-05 01:25:04,026 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@19d2447
2012-11-05 01:25:04,028 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration yes_no -> org.hibernate.type.YesNoType@96ade5
2012-11-05 01:25:04,032 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@110ff2b
2012-11-05 01:25:04,033 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@110ff2b
2012-11-05 01:25:04,033 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@110ff2b
2012-11-05 01:25:04,035 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration character -> org.hibernate.type.CharacterType@1182e51
2012-11-05 01:25:04,036 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char -> org.hibernate.type.CharacterType@1182e51
2012-11-05 01:25:04,037 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1182e51
2012-11-05 01:25:04,040 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@1594bee
2012-11-05 01:25:04,041 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@1594bee
2012-11-05 01:25:04,041 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1594bee
2012-11-05 01:25:04,044 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration integer -> org.hibernate.type.IntegerType@19fa96d
2012-11-05 01:25:04,045 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration int -> org.hibernate.type.IntegerType@19fa96d
2012-11-05 01:25:04,046 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@19fa96d
2012-11-05 01:25:04,049 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@62593
2012-11-05 01:25:04,050 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@62593
2012-11-05 01:25:04,050 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@62593
2012-11-05 01:25:04,054 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@18eaf0d
2012-11-05 01:25:04,054 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@18eaf0d
2012-11-05 01:25:04,054 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@18eaf0d
2012-11-05 01:25:04,057 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@169fd07
2012-11-05 01:25:04,058 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@169fd07
2012-11-05 01:25:04,058 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@169fd07
2012-11-05 01:25:04,061 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@19e7258
2012-11-05 01:25:04,062 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@19e7258
2012-11-05 01:25:04,064 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@88cc5f
2012-11-05 01:25:04,065 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@88cc5f
2012-11-05 01:25:04,067 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration string -> org.hibernate.type.StringType@86411
2012-11-05 01:25:04,067 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.String -> org.hibernate.type.StringType@86411
2012-11-05 01:25:04,070 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration url -> org.hibernate.type.UrlType@da70d4
2012-11-05 01:25:04,070 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@da70d4
2012-11-05 01:25:04,074 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration date -> org.hibernate.type.DateType@91c242
2012-11-05 01:25:04,075 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@91c242
2012-11-05 01:25:04,078 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration time -> org.hibernate.type.TimeType@1b4496d
2012-11-05 01:25:04,079 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@1b4496d
2012-11-05 01:25:04,082 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timestamp -> org.hibernate.type.TimestampType@9873b7
2012-11-05 01:25:04,082 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@9873b7
2012-11-05 01:25:04,083 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@9873b7
2012-11-05 01:25:04,085 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@286ab
2012-11-05 01:25:04,088 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar -> org.hibernate.type.CalendarType@b809cc
2012-11-05 01:25:04,088 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@b809cc
2012-11-05 01:25:04,088 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@b809cc
2012-11-05 01:25:04,090 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@cdb92b
2012-11-05 01:25:04,092 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration locale -> org.hibernate.type.LocaleType@332031
2012-11-05 01:25:04,093 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@332031
2012-11-05 01:25:04,095 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration currency -> org.hibernate.type.CurrencyType@1413a14
2012-11-05 01:25:04,095 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1413a14
2012-11-05 01:25:04,097 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@6689a8
2012-11-05 01:25:04,098 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@6689a8
2012-11-05 01:25:04,104 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration class -> org.hibernate.type.ClassType@1c01b1a
2012-11-05 01:25:04,104 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@1c01b1a
2012-11-05 01:25:04,108 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@a9de5c
2012-11-05 01:25:04,109 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@a9de5c
2012-11-05 01:25:04,111 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@1273f0c
2012-11-05 01:25:04,113 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@281cee
2012-11-05 01:25:04,116 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration binary -> org.hibernate.type.BinaryType@8e9e3d
2012-11-05 01:25:04,116 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte[] -> org.hibernate.type.BinaryType@8e9e3d
2012-11-05 01:25:04,117 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [B -> org.hibernate.type.BinaryType@8e9e3d
2012-11-05 01:25:04,119 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@11b0af
2012-11-05 01:25:04,119 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@11b0af
2012-11-05 01:25:04,120 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@11b0af
2012-11-05 01:25:04,121 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration image -> org.hibernate.type.ImageType@16b2d99
2012-11-05 01:25:04,124 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration characters -> org.hibernate.type.CharArrayType@22d1f4
2012-11-05 01:25:04,124 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char[] -> org.hibernate.type.CharArrayType@22d1f4
2012-11-05 01:25:04,125 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [C -> org.hibernate.type.CharArrayType@22d1f4
2012-11-05 01:25:04,127 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@771727
2012-11-05 01:25:04,128 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@771727
2012-11-05 01:25:04,128 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@771727
2012-11-05 01:25:04,130 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration text -> org.hibernate.type.TextType@198d466
2012-11-05 01:25:04,139 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration blob -> org.hibernate.type.BlobType@83fccc
2012-11-05 01:25:04,139 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@83fccc
2012-11-05 01:25:04,141 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@a93edc
2012-11-05 01:25:04,148 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration clob -> org.hibernate.type.ClobType@9b964
2012-11-05 01:25:04,149 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@9b964
2012-11-05 01:25:04,150 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@585a96
2012-11-05 01:25:04,152 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration serializable -> org.hibernate.type.SerializableType@10db0f9
2012-11-05 01:25:04,158 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration object -> org.hibernate.type.ObjectType@1b46468
2012-11-05 01:25:04,158 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1b46468
2012-11-05 01:25:04,159 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@d12c0c
2012-11-05 01:25:04,160 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@a2f76f
2012-11-05 01:25:04,160 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@122ad40
2012-11-05 01:25:04,161 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@19c7798
2012-11-05 01:25:04,161 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@16fda88
2012-11-05 01:25:04,161 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@741ea2
2012-11-05 01:25:04,162 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1875b76
2012-11-05 01:25:04,162 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@185a7f0
2012-11-05 01:25:04,201 [main] INFO  org.hibernate.annotations.common.Version.<clinit>(Version.java:37) - HCANN000001: Hibernate Commons Annotations {4.0.1.Final}
2012-11-05 01:25:04,222 [main] INFO  org.hibernate.Version.logVersion(Version.java:41) - HHH000412: Hibernate Core {4.1.1}
2012-11-05 01:25:04,226 [main] INFO  org.hibernate.cfg.Environment.<clinit>(Environment.java:239) - HHH000206: hibernate.properties not found
2012-11-05 01:25:04,229 [main] INFO  org.hibernate.cfg.Environment.buildBytecodeProvider(Environment.java:342) - HHH000021: Bytecode provider name : javassist
2012-11-05 01:25:04,253 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2012-11-05 01:25:04,255 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2012-11-05 01:25:04,257 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:25:04,257 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:25:04,260 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
2012-11-05 01:25:04,261 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2012-11-05 01:25:04,264 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2012-11-05 01:25:04,266 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2012-11-05 01:25:04,267 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
2012-11-05 01:25:04,268 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2012-11-05 01:25:04,270 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2012-11-05 01:25:04,271 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2012-11-05 01:25:04,272 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2012-11-05 01:25:04,274 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2012-11-05 01:25:04,276 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2012-11-05 01:25:04,280 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@16bded0
2012-11-05 01:25:04,281 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration boolean -> org.hibernate.type.BooleanType@16bded0
2012-11-05 01:25:04,281 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@16bded0
2012-11-05 01:25:04,282 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@639310
2012-11-05 01:25:04,282 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@19d2447
2012-11-05 01:25:04,282 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration yes_no -> org.hibernate.type.YesNoType@96ade5
2012-11-05 01:25:04,283 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@110ff2b
2012-11-05 01:25:04,283 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte -> org.hibernate.type.ByteType@110ff2b
2012-11-05 01:25:04,283 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@110ff2b
2012-11-05 01:25:04,283 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration character -> org.hibernate.type.CharacterType@1182e51
2012-11-05 01:25:04,284 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char -> org.hibernate.type.CharacterType@1182e51
2012-11-05 01:25:04,284 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1182e51
2012-11-05 01:25:04,284 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@1594bee
2012-11-05 01:25:04,285 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration short -> org.hibernate.type.ShortType@1594bee
2012-11-05 01:25:04,285 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1594bee
2012-11-05 01:25:04,285 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration integer -> org.hibernate.type.IntegerType@19fa96d
2012-11-05 01:25:04,286 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration int -> org.hibernate.type.IntegerType@19fa96d
2012-11-05 01:25:04,286 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@19fa96d
2012-11-05 01:25:04,286 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@62593
2012-11-05 01:25:04,287 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration long -> org.hibernate.type.LongType@62593
2012-11-05 01:25:04,287 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@62593
2012-11-05 01:25:04,287 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@18eaf0d
2012-11-05 01:25:04,287 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration float -> org.hibernate.type.FloatType@18eaf0d
2012-11-05 01:25:04,288 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@18eaf0d
2012-11-05 01:25:04,288 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@169fd07
2012-11-05 01:25:04,288 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration double -> org.hibernate.type.DoubleType@169fd07
2012-11-05 01:25:04,289 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@169fd07
2012-11-05 01:25:04,289 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@19e7258
2012-11-05 01:25:04,290 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@19e7258
2012-11-05 01:25:04,290 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@88cc5f
2012-11-05 01:25:04,290 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@88cc5f
2012-11-05 01:25:04,290 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration string -> org.hibernate.type.StringType@86411
2012-11-05 01:25:04,291 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.String -> org.hibernate.type.StringType@86411
2012-11-05 01:25:04,291 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration url -> org.hibernate.type.UrlType@da70d4
2012-11-05 01:25:04,291 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@da70d4
2012-11-05 01:25:04,292 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration date -> org.hibernate.type.DateType@91c242
2012-11-05 01:25:04,292 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@91c242
2012-11-05 01:25:04,292 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration time -> org.hibernate.type.TimeType@1b4496d
2012-11-05 01:25:04,293 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@1b4496d
2012-11-05 01:25:04,293 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timestamp -> org.hibernate.type.TimestampType@9873b7
2012-11-05 01:25:04,293 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@9873b7
2012-11-05 01:25:04,294 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@9873b7
2012-11-05 01:25:04,294 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@286ab
2012-11-05 01:25:04,294 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar -> org.hibernate.type.CalendarType@b809cc
2012-11-05 01:25:04,294 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@b809cc
2012-11-05 01:25:04,295 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@b809cc
2012-11-05 01:25:04,295 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@cdb92b
2012-11-05 01:25:04,295 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration locale -> org.hibernate.type.LocaleType@332031
2012-11-05 01:25:04,296 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@332031
2012-11-05 01:25:04,296 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration currency -> org.hibernate.type.CurrencyType@1413a14
2012-11-05 01:25:04,296 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@1413a14
2012-11-05 01:25:04,297 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@6689a8
2012-11-05 01:25:04,297 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@6689a8
2012-11-05 01:25:04,297 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration class -> org.hibernate.type.ClassType@1c01b1a
2012-11-05 01:25:04,297 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@1c01b1a
2012-11-05 01:25:04,298 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@a9de5c
2012-11-05 01:25:04,298 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@a9de5c
2012-11-05 01:25:04,298 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@1273f0c
2012-11-05 01:25:04,299 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@281cee
2012-11-05 01:25:04,299 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration binary -> org.hibernate.type.BinaryType@8e9e3d
2012-11-05 01:25:04,299 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration byte[] -> org.hibernate.type.BinaryType@8e9e3d
2012-11-05 01:25:04,299 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [B -> org.hibernate.type.BinaryType@8e9e3d
2012-11-05 01:25:04,300 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@11b0af
2012-11-05 01:25:04,301 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@11b0af
2012-11-05 01:25:04,301 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@11b0af
2012-11-05 01:25:04,302 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration image -> org.hibernate.type.ImageType@16b2d99
2012-11-05 01:25:04,302 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration characters -> org.hibernate.type.CharArrayType@22d1f4
2012-11-05 01:25:04,303 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration char[] -> org.hibernate.type.CharArrayType@22d1f4
2012-11-05 01:25:04,303 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [C -> org.hibernate.type.CharArrayType@22d1f4
2012-11-05 01:25:04,307 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@771727
2012-11-05 01:25:04,307 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@771727
2012-11-05 01:25:04,308 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@771727
2012-11-05 01:25:04,308 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration text -> org.hibernate.type.TextType@198d466
2012-11-05 01:25:04,309 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration blob -> org.hibernate.type.BlobType@83fccc
2012-11-05 01:25:04,309 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@83fccc
2012-11-05 01:25:04,310 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@a93edc
2012-11-05 01:25:04,310 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration clob -> org.hibernate.type.ClobType@9b964
2012-11-05 01:25:04,311 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@9b964
2012-11-05 01:25:04,311 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@585a96
2012-11-05 01:25:04,311 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration serializable -> org.hibernate.type.SerializableType@10db0f9
2012-11-05 01:25:04,312 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration object -> org.hibernate.type.ObjectType@1b46468
2012-11-05 01:25:04,313 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@1b46468
2012-11-05 01:25:04,313 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@120a14c
2012-11-05 01:25:04,314 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@13db55e
2012-11-05 01:25:04,315 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@3cc381
2012-11-05 01:25:04,316 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@1475cbd
2012-11-05 01:25:04,317 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@198527
2012-11-05 01:25:04,317 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@174f6c8
2012-11-05 01:25:04,317 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1f5e91e
2012-11-05 01:25:04,318 [main] DEBUG org.hibernate.type.BasicTypeRegistry.register(BasicTypeRegistry.java:143) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@19bd995
2012-11-05 01:25:04,318 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2012-11-05 01:25:04,319 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2012-11-05 01:25:04,319 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:25:04,320 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2012-11-05 01:25:04,320 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
2012-11-05 01:25:04,321 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2012-11-05 01:25:04,321 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2012-11-05 01:25:04,321 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2012-11-05 01:25:04,322 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
2012-11-05 01:25:04,322 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2012-11-05 01:25:04,323 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2012-11-05 01:25:04,323 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2012-11-05 01:25:04,323 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2012-11-05 01:25:04,324 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2012-11-05 01:25:04,324 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.register(DefaultIdentifierGeneratorFactory.java:93) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2012-11-05 01:25:04,327 [main] DEBUG org.hibernate.ejb.Ejb3Configuration.configure(Ejb3Configuration.java:525) - Processing PersistenceUnitInfo [
	name: sample
	persistence provider classname: null
	classloader: sun.misc.Launcher$AppClassLoader@e80a59
	Temporary classloader: org.springframework.instrument.classloading.SimpleThrowawayClassLoader@96cb44
	excludeUnlistedClasses: true
	JTA datasource: null
	Non JTA datasource: org.springframework.jdbc.datasource.SimpleDriverDataSource@1faf43a
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/Cedroic/workspaces/smsoip/ws-skeleton/target/test-classes/
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		com.emo.sample.domain.Client
		com.emo.sample.domain.order.Order
		com.emo.sample.domain.order.OrderLine
		com.emo.sample.domain.order.Price]
	Mapping files names []
	Properties []
2012-11-05 01:25:04,331 [main] DEBUG org.hibernate.ejb.Ejb3Configuration.setDetectedArtifactsOnScanningContext(Ejb3Configuration.java:841) - Detect class: true; detect hbm: true
2012-11-05 01:25:04,353 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.unqualify(AbstractJarVisitor.java:125) - Searching mapped entities in jar/par: file:/C:/Users/Cedroic/workspaces/smsoip/ws-skeleton/target/test-classes/
2012-11-05 01:25:04,355 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.acceptances.ClientIsMovingTest
2012-11-05 01:25:04,418 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.acceptances.NewClientTest
2012-11-05 01:25:04,419 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.acceptances.NewOrderTest
2012-11-05 01:25:04,421 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.framework.CommandDispatcherTest
2012-11-05 01:25:04,424 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.framework.HandlerBeanProcessorTest
2012-11-05 01:25:04,425 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.ClientIsMovingTest
2012-11-05 01:25:04,428 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest$RunBatchRestCalls
2012-11-05 01:25:04,430 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest$RunHessianCalls
2012-11-05 01:25:04,431 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest$RunRestCalls
2012-11-05 01:25:04,432 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.integration.PerformanceTest
2012-11-05 01:25:04,434 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.mains.WebMain
2012-11-05 01:25:04,436 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.utils.CommandUtils
2012-11-05 01:25:04,437 [main] DEBUG org.hibernate.ejb.packaging.AbstractJarVisitor.addElement(AbstractJarVisitor.java:171) - Filtering: com.emo.utils.EmbeddedServer
2012-11-05 01:25:04,478 [main] DEBUG org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:59) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2012-11-05 01:25:04,479 [main] DEBUG org.hibernate.integrator.internal.IntegratorServiceImpl.addIntegrator(IntegratorServiceImpl.java:59) - Adding Integrator [org.hibernate.ejb.event.JpaIntegrator].
2012-11-05 01:25:04,517 [main] DEBUG org.hibernate.ejb.util.NamingHelper.bind(NamingHelper.java:50) - No JNDI name configured for binding Ejb3Configuration
2012-11-05 01:25:04,534 [main] DEBUG org.hibernate.cfg.Configuration.buildSessionFactory(Configuration.java:1725) - Preparing to build session factory with filters : {}
2012-11-05 01:25:04,579 [main] DEBUG org.hibernate.cfg.Configuration$MetadataSourceQueue.processHbmXmlQueue(Configuration.java:3391) - Processing hbm.xml files
2012-11-05 01:25:04,580 [main] DEBUG org.hibernate.cfg.Configuration$MetadataSourceQueue.processAnnotatedClassesQueue(Configuration.java:3421) - Process annotated classes
2012-11-05 01:25:04,587 [main] DEBUG org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:530) - Binding entity from annotated class: com.emo.sample.domain.Client
2012-11-05 01:25:04,628 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2012-11-05 01:25:04,643 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) - Import with entity name Client
2012-11-05 01:25:04,650 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:534) - Bind entity com.emo.sample.domain.Client on table Client
2012-11-05 01:25:04,695 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=clientCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,702 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property clientCode with lazy=false
2012-11-05 01:25:04,707 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for clientCode
2012-11-05 01:25:04,710 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property clientCode
2012-11-05 01:25:04,717 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=city, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,718 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property city with lazy=false
2012-11-05 01:25:04,718 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for city
2012-11-05 01:25:04,718 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property city
2012-11-05 01:25:04,719 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=countryCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,719 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property countryCode with lazy=false
2012-11-05 01:25:04,720 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for countryCode
2012-11-05 01:25:04,720 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property countryCode
2012-11-05 01:25:04,721 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=name, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,721 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property name with lazy=false
2012-11-05 01:25:04,722 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for name
2012-11-05 01:25:04,722 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property name
2012-11-05 01:25:04,723 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=street, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,723 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property street with lazy=false
2012-11-05 01:25:04,723 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for street
2012-11-05 01:25:04,724 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property street
2012-11-05 01:25:04,724 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Client), mappingColumn=zip, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,725 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property zip with lazy=false
2012-11-05 01:25:04,726 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for zip
2012-11-05 01:25:04,726 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property zip
2012-11-05 01:25:04,729 [main] DEBUG org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:530) - Binding entity from annotated class: com.emo.sample.domain.order.Order
2012-11-05 01:25:04,729 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2012-11-05 01:25:04,730 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) - Import with entity name Order
2012-11-05 01:25:04,731 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:534) - Bind entity com.emo.sample.domain.order.Order on table SalesOrder
2012-11-05 01:25:04,757 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=orderCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,758 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property orderCode with lazy=false
2012-11-05 01:25:04,758 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for orderCode
2012-11-05 01:25:04,758 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property orderCode
2012-11-05 01:25:04,759 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=forCustomerCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,759 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property forCustomerCode with lazy=false
2012-11-05 01:25:04,760 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for forCustomerCode
2012-11-05 01:25:04,760 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property forCustomerCode
2012-11-05 01:25:04,761 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='', mappedBy=''}
2012-11-05 01:25:04,762 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=lines, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,764 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=null, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,787 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=element, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,789 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=lines_KEY, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,790 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='lines_KEY', referencedColumn='null', mappedBy='null'}
2012-11-05 01:25:04,793 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
2012-11-05 01:25:04,794 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3JoinColumn{logicalColumnName='null', referencedColumn='null', mappedBy=''}
2012-11-05 01:25:04,795 [main] DEBUG org.hibernate.cfg.annotations.CollectionBinder.bind(CollectionBinder.java:402) - Collection role: com.emo.sample.domain.order.Order.lines
2012-11-05 01:25:04,802 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property lines
2012-11-05 01:25:04,802 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SalesOrder), mappingColumn=state, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,803 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property state with lazy=false
2012-11-05 01:25:04,806 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for state
2012-11-05 01:25:04,807 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property state
2012-11-05 01:25:04,807 [main] DEBUG org.hibernate.cfg.AnnotationBinder.bindClass(AnnotationBinder.java:530) - Binding entity from annotated class: com.emo.sample.domain.order.OrderLine
2012-11-05 01:25:04,807 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2012-11-05 01:25:04,808 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindEntity(EntityBinder.java:364) - Import with entity name OrderLine
2012-11-05 01:25:04,809 [main] DEBUG org.hibernate.cfg.annotations.EntityBinder.bindTable(EntityBinder.java:534) - Bind entity com.emo.sample.domain.order.OrderLine on table OrderLine
2012-11-05 01:25:04,815 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=id, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,816 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property internalId with lazy=false
2012-11-05 01:25:04,816 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for internalId
2012-11-05 01:25:04,817 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property internalId
2012-11-05 01:25:04,817 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=item, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,818 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property item with lazy=false
2012-11-05 01:25:04,818 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for item
2012-11-05 01:25:04,819 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property item
2012-11-05 01:25:04,820 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=lineId, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,820 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property lineId with lazy=false
2012-11-05 01:25:04,820 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for lineId
2012-11-05 01:25:04,821 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property lineId
2012-11-05 01:25:04,821 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=price, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,826 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=currencyCode, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,827 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property currencyCode with lazy=false
2012-11-05 01:25:04,827 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for currencyCode
2012-11-05 01:25:04,828 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property currencyCode
2012-11-05 01:25:04,828 [main] DEBUG org.hibernate.cfg.Ejb3Column.bind(Ejb3Column.java:196) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(OrderLine), mappingColumn=price, insertable=true, updatable=true, unique=false}
2012-11-05 01:25:04,829 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makePropertyAndValue(PropertyBinder.java:178) - MetadataSourceProcessor property price with lazy=false
2012-11-05 01:25:04,829 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.make(SimpleValueBinder.java:304) - building SimpleValue for price
2012-11-05 01:25:04,830 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property price
2012-11-05 01:25:04,830 [main] DEBUG org.hibernate.cfg.annotations.PropertyBinder.makeProperty(PropertyBinder.java:258) - Building property price
2012-11-05 01:25:04,831 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for clientCode
2012-11-05 01:25:04,832 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for city
2012-11-05 01:25:04,832 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for countryCode
2012-11-05 01:25:04,833 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for name
2012-11-05 01:25:04,833 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for street
2012-11-05 01:25:04,834 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for zip
2012-11-05 01:25:04,834 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for orderCode
2012-11-05 01:25:04,834 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for forCustomerCode
2012-11-05 01:25:04,835 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for state
2012-11-05 01:25:04,835 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for internalId
2012-11-05 01:25:04,835 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for item
2012-11-05 01:25:04,835 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for lineId
2012-11-05 01:25:04,836 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for currencyCode
2012-11-05 01:25:04,836 [main] DEBUG org.hibernate.cfg.annotations.SimpleValueBinder.fillSimpleValue(SimpleValueBinder.java:342) - Setting SimpleValue typeName for price
2012-11-05 01:25:04,837 [main] DEBUG org.hibernate.cfg.Configuration.processFkSecondPassInOrder(Configuration.java:1403) - Processing fk mappings (*ToOne and JoinedSubclass)
2012-11-05 01:25:04,839 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1579) - Processing extends queue
2012-11-05 01:25:04,840 [main] DEBUG org.hibernate.cfg.Configuration.processExtendsQueue(Configuration.java:1633) - Processing extends queue
2012-11-05 01:25:04,840 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1582) - Processing collection mappings
2012-11-05 01:25:04,840 [main] DEBUG org.hibernate.cfg.CollectionSecondPass.doSecondPass(CollectionSecondPass.java:64) - Second pass for collection: com.emo.sample.domain.order.Order.lines
2012-11-05 01:25:04,841 [main] DEBUG org.hibernate.cfg.annotations.CollectionBinder.bindOneToManySecondPass(CollectionBinder.java:761) - Binding a OneToMany: com.emo.sample.domain.order.Order.lines through a foreign key
2012-11-05 01:25:04,843 [main] DEBUG org.hibernate.cfg.annotations.CollectionBinder.bindOneToManySecondPass(CollectionBinder.java:790) - Mapping collection: com.emo.sample.domain.order.Order.lines -> OrderLine
2012-11-05 01:25:04,848 [main] DEBUG org.hibernate.cfg.CollectionSecondPass.doSecondPass(CollectionSecondPass.java:80) - Mapped collection key: lines_orderCode, one-to-many: com.emo.sample.domain.order.OrderLine
2012-11-05 01:25:04,848 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1592) - Processing native query and ResultSetMapping mappings
2012-11-05 01:25:04,849 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1600) - Processing association property references
2012-11-05 01:25:04,849 [main] DEBUG org.hibernate.cfg.Configuration.originalSecondPassCompile(Configuration.java:1622) - Processing foreign key constraints
2012-11-05 01:25:04,849 [main] DEBUG org.hibernate.cfg.Configuration.secondPassCompileForeignKeys(Configuration.java:1690) - Resolving reference to class: com.emo.sample.domain.order.Order
2012-11-05 01:25:04,894 [main] INFO  org.hibernate.service.jdbc.connections.internal.ConnectionProviderInitiator.instantiateExplicitConnectionProvider(ConnectionProviderInitiator.java:188) - HHH000130: Instantiating explicit connection provider: org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider
2012-11-05 01:25:04,942 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:121) - Database ->
       name : HSQL Database Engine
    version : 2.2.8
      major : 2
      minor : 2
2012-11-05 01:25:04,943 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:127) - Driver ->
       name : HSQL Database Engine Driver
    version : 2.2.8
      major : 2
      minor : 2
2012-11-05 01:25:04,943 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcServicesImpl.configure(JdbcServicesImpl.java:133) - JDBC version : 4.0
2012-11-05 01:25:04,970 [main] INFO  org.hibernate.dialect.Dialect.<init>(Dialect.java:122) - HHH000400: Using dialect: org.hibernate.dialect.HSQLDialect
2012-11-05 01:25:05,015 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:100) - Automatic flush during beforeCompletion(): disabled
2012-11-05 01:25:05,015 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:106) - Automatic session close at end of transaction: disabled
2012-11-05 01:25:05,016 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:117) - JDBC batch size: 15
2012-11-05 01:25:05,016 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:123) - JDBC batch updates for versioned data: disabled
2012-11-05 01:25:05,016 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:133) - Scrollable result sets: enabled
2012-11-05 01:25:05,017 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:139) - Wrap result sets: disabled
2012-11-05 01:25:05,017 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:145) - JDBC3 getGeneratedKeys(): enabled
2012-11-05 01:25:05,017 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:157) - Connection release mode: auto
2012-11-05 01:25:05,018 [main] INFO  org.hibernate.engine.transaction.internal.TransactionFactoryInitiator.initiateService(TransactionFactoryInitiator.java:73) - HHH000268: Transaction strategy: org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory
2012-11-05 01:25:05,022 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:194) - Default batch fetch size: 1
2012-11-05 01:25:05,023 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:200) - Generate SQL with comments: disabled
2012-11-05 01:25:05,023 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:206) - Order SQL updates by primary key: disabled
2012-11-05 01:25:05,024 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:212) - Order SQL inserts for batching: disabled
2012-11-05 01:25:05,024 [main] DEBUG org.hibernate.cfg.SettingsFactory.createQueryTranslatorFactory(SettingsFactory.java:443) - Query translator: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
2012-11-05 01:25:05,028 [main] INFO  org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory.<init>(ASTQueryTranslatorFactory.java:48) - HHH000397: Using ASTQueryTranslatorFactory
2012-11-05 01:25:05,029 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:222) - Query language substitutions: {}
2012-11-05 01:25:05,029 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:228) - JPA-QL strict compliance: enabled
2012-11-05 01:25:05,030 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:236) - Second-level cache: enabled
2012-11-05 01:25:05,030 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:242) - Query cache: disabled
2012-11-05 01:25:05,031 [main] DEBUG org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:383) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2012-11-05 01:25:05,032 [main] DEBUG org.hibernate.cfg.SettingsFactory.createRegionFactory(SettingsFactory.java:393) - org.hibernate.cache.internal.NoCachingRegionFactory did not provide constructor accepting java.util.Properties; attempting no-arg constructor.
2012-11-05 01:25:05,033 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:257) - Optimize cache for minimal puts: disabled
2012-11-05 01:25:05,033 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:272) - Structured second-level cache entries: disabled
2012-11-05 01:25:05,033 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:281) - Statistics: disabled
2012-11-05 01:25:05,034 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:287) - Deleted entity synthetic identifier rollback: disabled
2012-11-05 01:25:05,034 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:311) - Default entity-mode: pojo
2012-11-05 01:25:05,034 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:317) - Named query checking : enabled
2012-11-05 01:25:05,035 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:323) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2012-11-05 01:25:05,035 [main] DEBUG org.hibernate.cfg.SettingsFactory.buildSettings(SettingsFactory.java:329) - multi-tenancy strategy : NONE
2012-11-05 01:25:05,050 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:226) - Building session factory
2012-11-05 01:25:05,065 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:276) - Session factory constructed with filter configurations : {}
2012-11-05 01:25:05,065 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:277) - Instantiating session factory with properties: {java.runtime.name=Java(TM) SE Runtime Environment, sun.boot.library.path=C:\Program Files\Java\jre7\bin, java.vm.version=21.1-b02, java.vm.vendor=Oracle Corporation, java.vendor.url=http://java.oracle.com/, path.separator=;, java.vm.name=Java HotSpot(TM) Client VM, file.encoding.pkg=sun.io, user.script=, user.country=FR, sun.java.launcher=SUN_STANDARD, sun.os.patch.level=, java.vm.specification.name=Java Virtual Machine Specification, user.dir=C:\Users\Cedroic\workspaces\smsoip\ws-skeleton, javax.persistence.sharedCache.mode=UNSPECIFIED, java.runtime.version=1.7.0_01-b08, hibernate.ejb.discard_pc_on_close=false, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, java.endorsed.dirs=C:\Program Files\Java\jre7\lib\endorsed, os.arch=x86, hibernate.connection.autocommit=true, java.io.tmpdir=C:\Users\Cedroic\AppData\Local\Temp\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, user.variant=, os.name=Windows 7, sun.jnu.encoding=Cp1252, java.library.path=C:\Program Files\Java\jre7\bin;C:\windows\Sun\Java\bin;C:\windows\system32;C:\windows;C:/Program Files/Java/jre7/bin/client;C:/Program Files/Java/jre7/bin;C:/Program Files/Java/jre7/lib/i386;D:\vertx\vert.x-1.2.3-final\bin;D:\apache-maven-3.0.4\bin;D:\spring-roo-1.2.0.RC1\bin;C:\windows\system32;C:\windows;C:\windows\System32\Wbem;C:\windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files\Mercurial\;C:\Program Files\Git\cmd;D:\springsource\sts-2.8.1.RELEASE;;., hibernate.connection.datasource=org.springframework.jdbc.datasource.SimpleDriverDataSource@1faf43a, java.specification.name=Java Platform API Specification, java.class.version=51.0, sun.management.compiler=HotSpot Client Compiler, hibernate.transaction.factory_class=org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory, os.version=6.1, user.home=C:\Users\Cedroic, user.timezone=Europe/Paris, java.awt.printerjob=sun.awt.windows.WPrinterJob, hibernate.connection.release_mode=auto, java.specification.version=1.7, file.encoding=Cp1252, user.name=Cedroic, java.class.path=C:\Users\Cedroic\workspaces\smsoip\ws-skeleton\target\test-classes;C:\Users\Cedroic\workspaces\smsoip\ws-skeleton\target\classes;C:\Users\Cedroic\.m2\repository\junit\junit\4.10\junit-4.10.jar;C:\Users\Cedroic\.m2\repository\org\hamcrest\hamcrest-core\1.1\hamcrest-core-1.1.jar;C:\Users\Cedroic\.m2\repository\com\jayway\restassured\rest-assured\1.6.2\rest-assured-1.6.2.jar;C:\Users\Cedroic\.m2\repository\org\codehaus\groovy\groovy\1.8.4\groovy-1.8.4.jar;C:\Users\Cedroic\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\Cedroic\.m2\repository\asm\asm-commons\3.2\asm-commons-3.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm-util\3.2\asm-util-3.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm-analysis\3.2\asm-analysis-3.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm-tree\3.2\asm-tree-3.2.jar;C:\Users\Cedroic\.m2\repository\org\apache\httpcomponents\httpclient\4.1.3\httpclient-4.1.3.jar;C:\Users\Cedroic\.m2\repository\org\apache\httpcomponents\httpcore\4.1.4\httpcore-4.1.4.jar;C:\Users\Cedroic\.m2\repository\commons-codec\commons-codec\1.4\commons-codec-1.4.jar;C:\Users\Cedroic\.m2\repository\org\apache\httpcomponents\httpmime\4.1.3\httpmime-4.1.3.jar;C:\Users\Cedroic\.m2\repository\org\hamcrest\hamcrest-library\1.2.1\hamcrest-library-1.2.1.jar;C:\Users\Cedroic\.m2\repository\commons-collections\commons-collections\3.2.1\commons-collections-3.2.1.jar;C:\Users\Cedroic\.m2\repository\org\apache\commons\commons-lang3\3.1\commons-lang3-3.1.jar;C:\Users\Cedroic\.m2\repository\org\ccil\cowan\tagsoup\tagsoup\1.2.1\tagsoup-1.2.1.jar;C:\Users\Cedroic\.m2\repository\org\hamcrest\hamcrest-all\1.3\hamcrest-all-1.3.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-core\3.1.2.RELEASE\spring-core-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-asm\3.1.2.RELEASE\spring-asm-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\commons-logging\commons-logging\1.1.1\commons-logging-1.1.1.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-context\3.1.2.RELEASE\spring-context-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-aop\3.1.2.RELEASE\spring-aop-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-beans\3.1.2.RELEASE\spring-beans-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-expression\3.1.2.RELEASE\spring-expression-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-web\3.1.2.RELEASE\spring-web-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-tx\3.1.2.RELEASE\spring-tx-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-orm\3.1.2.RELEASE\spring-orm-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-jdbc\3.1.2.RELEASE\spring-jdbc-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\spring-test\3.1.2.RELEASE\spring-test-3.1.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\hibernate-entitymanager\4.1.1.Final\hibernate-entitymanager-4.1.1.Final.jar;C:\Users\Cedroic\.m2\repository\org\jboss\logging\jboss-logging\3.1.0.GA\jboss-logging-3.1.0.GA.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\hibernate-core\4.1.1.Final\hibernate-core-4.1.1.Final.jar;C:\Users\Cedroic\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.1_spec\1.0.0.Final\jboss-transaction-api_1.1_spec-1.0.0.Final.jar;C:\Users\Cedroic\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\Cedroic\.m2\repository\xml-apis\xml-apis\1.0.b2\xml-apis-1.0.b2.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;C:\Users\Cedroic\.m2\repository\org\javassist\javassist\3.15.0-GA\javassist-3.15.0-GA.jar;C:\Users\Cedroic\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.1.Final\hibernate-commons-annotations-4.0.1.Final.jar;C:\Users\Cedroic\.m2\repository\net\sf\oval\oval\1.81\oval-1.81.jar;C:\Users\Cedroic\.m2\repository\org\hsqldb\hsqldb\2.2.8\hsqldb-2.2.8.jar;C:\Users\Cedroic\.m2\repository\org\slf4j\slf4j-log4j12\1.6.6\slf4j-log4j12-1.6.6.jar;C:\Users\Cedroic\.m2\repository\org\slf4j\slf4j-api\1.6.6\slf4j-api-1.6.6.jar;C:\Users\Cedroic\.m2\repository\log4j\log4j\1.2.17\log4j-1.2.17.jar;C:\Users\Cedroic\.m2\repository\cglib\cglib\2.2.2\cglib-2.2.2.jar;C:\Users\Cedroic\.m2\repository\asm\asm\3.3.1\asm-3.3.1.jar;C:\Users\Cedroic\.m2\repository\org\springframework\data\spring-data-jpa\1.1.1.RELEASE\spring-data-jpa-1.1.1.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\springframework\data\spring-data-commons-core\1.3.2.RELEASE\spring-data-commons-core-1.3.2.RELEASE.jar;C:\Users\Cedroic\.m2\repository\org\slf4j\jcl-over-slf4j\1.6.1\jcl-over-slf4j-1.6.1.jar;C:\Users\Cedroic\.m2\repository\org\aspectj\aspectjrt\1.6.12\aspectjrt-1.6.12.jar;C:\Users\Cedroic\.m2\repository\com\yammer\metrics\metrics-core\2.1.3\metrics-core-2.1.3.jar;C:\Users\Cedroic\.m2\repository\javolution\javolution\5.5.1\javolution-5.5.1.jar;C:\Users\Cedroic\.m2\repository\commons-lang\commons-lang\2.6\commons-lang-2.6.jar;C:\Users\Cedroic\.m2\repository\it\unimi\dsi\fastutil\6.4.1\fastutil-6.4.1.jar;C:\Users\Cedroic\.m2\repository\net\minidev\json-smart\2.0-RC2\json-smart-2.0-RC2.jar;C:\Users\Cedroic\.m2\repository\net\minidev\asm\1.0-RC1\asm-1.0-RC1.jar;C:\Users\Cedroic\.m2\repository\com\google\guava\guava\10.0.1\guava-10.0.1.jar;C:\Users\Cedroic\.m2\repository\com\google\code\findbugs\jsr305\1.3.9\jsr305-1.3.9.jar;C:\Users\Cedroic\.m2\repository\com\googlecode\disruptor\disruptor\2.10.3\disruptor-2.10.3.jar;C:\Users\Cedroic\.m2\repository\com\caucho\resin\4.0.30\resin-4.0.30.jar;C:\Users\Cedroic\.m2\repository\com\caucho\resin-javaee16\4.0.30\resin-javaee16-4.0.30.jar;C:\Users\Cedroic\.m2\repository\javax\activation\activation\1.1\activation-1.1.jar;C:\Users\Cedroic\.m2\repository\javax\annotation\jsr250-api\1.0\jsr250-api-1.0.jar;C:\Users\Cedroic\.m2\repository\javax\mail\mail\1.4\mail-1.4.jar;C:\Users\Cedroic\.m2\repository\com\caucho\resin-hessian\4.0.30\resin-hessian-4.0.30.jar;C:\Users\Cedroic\.m2\repository\commons-beanutils\commons-beanutils\1.8.3\commons-beanutils-1.8.3.jar;C:\Users\Cedroic\.m2\repository\org\apache\wicket\wicket-core\6.2.0\wicket-core-6.2.0.jar;C:\Users\Cedroic\.m2\repository\org\apache\wicket\wicket-util\6.2.0\wicket-util-6.2.0.jar;C:\Users\Cedroic\.m2\repository\org\apache\wicket\wicket-request\6.2.0\wicket-request-6.2.0.jar;/D:/springsource/sts-2.8.1.RELEASE/configuration/org.eclipse.osgi/bundles/418/1/.cp/;/D:/springsource/sts-2.8.1.RELEASE/configuration/org.eclipse.osgi/bundles/416/1/.cp/;/D:/springsource/sts-2.8.1.RELEASE/configuration/org.eclipse.osgi/bundles/417/1/.cp/, hibernate.bytecode.use_reflection_optimizer=false, hibernate.use_identifier_rollback=false, javax.persistence.validation.mode=AUTO, java.vm.specification.version=1.7, sun.arch.data.model=32, java.home=C:\Program Files\Java\jre7, sun.java.command=org.eclipse.jdt.internal.junit.runner.RemoteTestRunner -version 3 -port 56950 -testLoaderClass org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader -loaderpluginname org.eclipse.jdt.junit4.runtime -testNameFile C:\Users\Cedroic\AppData\Local\Temp\testNames5153141516091065772.txt, hibernate.dialect=org.hibernate.dialect.HSQLDialect, java.specification.vendor=Oracle Corporation, user.language=fr, awt.toolkit=sun.awt.windows.WToolkit, java.vm.info=mixed mode, sharing, java.version=1.7.0_01, hibernate.transaction.flush_before_completion=false, java.ext.dirs=C:\Program Files\Java\jre7\lib\ext;C:\windows\Sun\Java\lib\ext, sun.boot.class.path=C:\Program Files\Java\jre7\lib\resources.jar;C:\Program Files\Java\jre7\lib\rt.jar;C:\Program Files\Java\jre7\lib\sunrsasign.jar;C:\Program Files\Java\jre7\lib\jsse.jar;C:\Program Files\Java\jre7\lib\jce.jar;C:\Program Files\Java\jre7\lib\charsets.jar;C:\Program Files\Java\jre7\classes, java.vendor=Oracle Corporation, file.separator=\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, hibernate.connection.provider_class=org.hibernate.ejb.connection.InjectedDataSourceConnectionProvider, sun.cpu.endian=little, sun.io.unicode.encoding=UnicodeLittle, hibernate.query.jpaql_strict_compliance=true, sun.desktop=windows, sun.cpu.isalist=}
2012-11-05 01:25:05,197 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:107) - Setting dialect [org.hibernate.dialect.HSQLDialect]
2012-11-05 01:25:05,198 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:107) - Setting dialect [org.hibernate.dialect.HSQLDialect]
2012-11-05 01:25:05,198 [main] DEBUG org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.setDialect(DefaultIdentifierGeneratorFactory.java:107) - Setting dialect [org.hibernate.dialect.HSQLDialect]
2012-11-05 01:25:05,323 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3381) - Static SQL for entity: com.emo.sample.domain.order.Order
2012-11-05 01:25:05,324 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3383) -  Version select: select orderCode from SalesOrder where orderCode =?
2012-11-05 01:25:05,325 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3384) -  Snapshot select: select order_.orderCode, order_.forCustomerCode as forCusto2_1_, order_.state as state1_ from SalesOrder order_ where order_.orderCode=?
2012-11-05 01:25:05,325 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3386) -  Insert 0: insert into SalesOrder (forCustomerCode, state, orderCode) values (?, ?, ?)
2012-11-05 01:25:05,326 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3387) -  Update 0: update SalesOrder set forCustomerCode=?, state=? where orderCode=?
2012-11-05 01:25:05,327 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3388) -  Delete 0: delete from SalesOrder where orderCode=?
2012-11-05 01:25:05,332 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3381) - Static SQL for entity: com.emo.sample.domain.Client
2012-11-05 01:25:05,332 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3383) -  Version select: select clientCode from Client where clientCode =?
2012-11-05 01:25:05,333 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3384) -  Snapshot select: select client_.clientCode, client_.city as city0_, client_.countryCode as countryC3_0_, client_.name as name0_, client_.street as street0_, client_.zip as zip0_ from Client client_ where client_.clientCode=?
2012-11-05 01:25:05,333 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3386) -  Insert 0: insert into Client (city, countryCode, name, street, zip, clientCode) values (?, ?, ?, ?, ?, ?)
2012-11-05 01:25:05,333 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3387) -  Update 0: update Client set city=?, countryCode=?, name=?, street=?, zip=? where clientCode=?
2012-11-05 01:25:05,334 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3388) -  Delete 0: delete from Client where clientCode=?
2012-11-05 01:25:05,339 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3381) - Static SQL for entity: com.emo.sample.domain.order.OrderLine
2012-11-05 01:25:05,340 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3383) -  Version select: select id from OrderLine where id =?
2012-11-05 01:25:05,340 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3384) -  Snapshot select: select orderline_.id, orderline_.item as item2_, orderline_.lineId as lineId2_, orderline_.currencyCode as currency4_2_, orderline_.price as price2_ from OrderLine orderline_ where orderline_.id=?
2012-11-05 01:25:05,341 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3386) -  Insert 0: insert into OrderLine (item, lineId, currencyCode, price, id) values (?, ?, ?, ?, ?)
2012-11-05 01:25:05,341 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3387) -  Update 0: update OrderLine set item=?, lineId=?, currencyCode=?, price=? where id=?
2012-11-05 01:25:05,342 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3388) -  Delete 0: delete from OrderLine where id=?
2012-11-05 01:25:05,342 [main] DEBUG org.hibernate.persister.entity.AbstractEntityPersister.logStaticSQL(AbstractEntityPersister.java:3390) -  Identity insert: insert into OrderLine (id, item, lineId, currencyCode, price) values (default, ?, ?, ?, ?)
2012-11-05 01:25:05,354 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:613) - Static SQL for collection: com.emo.sample.domain.order.Order.lines
2012-11-05 01:25:05,355 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:614) -  Row insert: update OrderLine set lines_orderCode=? where id=?
2012-11-05 01:25:05,355 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:616) -  Row delete: update OrderLine set lines_orderCode=null where lines_orderCode=? and id=?
2012-11-05 01:25:05,356 [main] DEBUG org.hibernate.persister.collection.AbstractCollectionPersister.logStaticSQL(AbstractCollectionPersister.java:617) -  One-shot delete: update OrderLine set lines_orderCode=null where lines_orderCode=?
2012-11-05 01:25:05,388 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [NONE]: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:25:05,389 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [READ]: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:25:05,390 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [UPGRADE]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:25:05,391 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [UPGRADE_NOWAIT]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:25:05,391 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [FORCE]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:25:05,392 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [PESSIMISTIC_READ]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:25:05,393 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [PESSIMISTIC_WRITE]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:25:05,393 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [PESSIMISTIC_FORCE_INCREMENT]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:25:05,394 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [OPTIMISTIC]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:25:05,395 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.Order [OPTIMISTIC_FORCE_INCREMENT]: select order0_.orderCode as orderCode1_0_, order0_.forCustomerCode as forCusto2_1_0_, order0_.state as state1_0_ from SalesOrder order0_ where order0_.orderCode=?
2012-11-05 01:25:05,410 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_MERGE on entity com.emo.sample.domain.order.Order: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:25:05,411 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_REFRESH on entity com.emo.sample.domain.order.Order: select order0_.orderCode as orderCode1_1_, order0_.forCustomerCode as forCusto2_1_1_, order0_.state as state1_1_, lines1_.lines_orderCode as lines6_1_3_, lines1_.id as id3_, lines1_.id as id2_0_, lines1_.item as item2_0_, lines1_.lineId as lineId2_0_, lines1_.currencyCode as currency4_2_0_, lines1_.price as price2_0_ from SalesOrder order0_ left outer join OrderLine lines1_ on order0_.orderCode=lines1_.lines_orderCode where order0_.orderCode=?
2012-11-05 01:25:05,411 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [NONE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,412 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [READ]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,413 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [UPGRADE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,413 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [UPGRADE_NOWAIT]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,414 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [FORCE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,414 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [PESSIMISTIC_READ]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,415 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [PESSIMISTIC_WRITE]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,416 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [PESSIMISTIC_FORCE_INCREMENT]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,416 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [OPTIMISTIC]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,417 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.Client [OPTIMISTIC_FORCE_INCREMENT]: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,417 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_MERGE on entity com.emo.sample.domain.Client: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,418 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_REFRESH on entity com.emo.sample.domain.Client: select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:05,419 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [NONE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,419 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [READ]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,420 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [UPGRADE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,420 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [UPGRADE_NOWAIT]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,421 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [FORCE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,421 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [PESSIMISTIC_READ]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,422 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [PESSIMISTIC_WRITE]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,423 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [PESSIMISTIC_FORCE_INCREMENT]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,423 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [OPTIMISTIC]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,424 [main] DEBUG org.hibernate.loader.entity.EntityLoader.<init>(EntityLoader.java:123) - Static select for entity com.emo.sample.domain.order.OrderLine [OPTIMISTIC_FORCE_INCREMENT]: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,425 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_MERGE on entity com.emo.sample.domain.order.OrderLine: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,425 [main] DEBUG org.hibernate.loader.entity.CascadeEntityLoader.<init>(CascadeEntityLoader.java:56) - Static select for action ACTION_REFRESH on entity com.emo.sample.domain.order.OrderLine: select orderline0_.id as id2_0_, orderline0_.item as item2_0_, orderline0_.lineId as lineId2_0_, orderline0_.currencyCode as currency4_2_0_, orderline0_.price as price2_0_ from OrderLine orderline0_ where orderline0_.id=?
2012-11-05 01:25:05,431 [main] DEBUG org.hibernate.loader.collection.OneToManyLoader.<init>(OneToManyLoader.java:82) - Static select for one-to-many com.emo.sample.domain.order.Order.lines: select lines0_.lines_orderCode as lines6_1_1_, lines0_.id as id1_, lines0_.id as id2_0_, lines0_.item as item2_0_, lines0_.lineId as lineId2_0_, lines0_.currencyCode as currency4_2_0_, lines0_.price as price2_0_ from OrderLine lines0_ where lines0_.lines_orderCode=?
2012-11-05 01:25:05,469 [main] DEBUG org.hibernate.internal.SessionFactoryRegistry.<init>(SessionFactoryRegistry.java:62) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@e1d5d9
2012-11-05 01:25:05,470 [main] DEBUG org.hibernate.internal.SessionFactoryRegistry.addSessionFactory(SessionFactoryRegistry.java:75) - Registering SessionFactory: b2b546ef-04e0-4d2f-b44a-8987b97f86f0 (<unnamed>)
2012-11-05 01:25:05,470 [main] DEBUG org.hibernate.internal.SessionFactoryRegistry.addSessionFactory(SessionFactoryRegistry.java:82) - Not binding SessionFactory to JNDI, no JNDI name configured
2012-11-05 01:25:05,471 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:487) - Instantiated session factory
2012-11-05 01:25:05,471 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:1119) - Checking 0 named HQL queries
2012-11-05 01:25:05,471 [main] DEBUG org.hibernate.internal.SessionFactoryImpl.checkNamedQueries(SessionFactoryImpl.java:1142) - Checking 0 named SQL queries
2012-11-05 01:25:05,479 [main] DEBUG org.hibernate.stat.internal.StatisticsInitiator.initiateServiceInternal(StatisticsInitiator.java:110) - Statistics initialized [enabled=false]
2012-11-05 01:25:05,552 [main] DEBUG org.hibernate.ejb.internal.EntityManagerFactoryRegistry.<init>(EntityManagerFactoryRegistry.java:55) - Initializing EntityManagerFactoryRegistry : org.hibernate.ejb.internal.EntityManagerFactoryRegistry@1466e6
2012-11-05 01:25:05,552 [main] DEBUG org.hibernate.ejb.internal.EntityManagerFactoryRegistry.addEntityManagerFactory(EntityManagerFactoryRegistry.java:65) - Registering EntityManagerFactory: sample 
2012-11-05 01:25:05,905 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520751058
2012-11-05 01:25:05,915 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520751059
2012-11-05 01:25:06,010 [main] DEBUG org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:106) - Adding transactional method 'handle' with attribute: PROPAGATION_REQUIRES_NEW,ISOLATION_DEFAULT; ''
2012-11-05 01:25:06,032 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520751060
2012-11-05 01:25:06,033 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520751060
2012-11-05 01:25:06,047 [main] DEBUG org.springframework.transaction.interceptor.AbstractFallbackTransactionAttributeSource.getTransactionAttribute(AbstractFallbackTransactionAttributeSource.java:106) - Adding transactional method 'handle' with attribute: PROPAGATION_REQUIRES_NEW,ISOLATION_DEFAULT; ''
2012-11-05 01:25:06,265 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520751062
2012-11-05 01:25:06,272 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Client as generatedAlias0 where generatedAlias0.clientCode=:param0
2012-11-05 01:25:06,340 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.parse(QueryTranslatorImpl.java:265) - parse() - HQL: select generatedAlias0 from com.emo.sample.domain.Client as generatedAlias0 where generatedAlias0.clientCode=:param0
2012-11-05 01:25:06,356 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.showHqlAst(QueryTranslatorImpl.java:283) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'emo'
    |  |     |  |  |  \-[IDENT] Node: 'sample'
    |  |     |  |  \-[IDENT] Node: 'domain'
    |  |     |  \-[IDENT] Node: 'Client'
    |  |     \-[ALIAS] Node: 'generatedAlias0'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'generatedAlias0'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'generatedAlias0'
          |  \-[IDENT] Node: 'clientCode'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'param0'

2012-11-05 01:25:06,357 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:25:06,396 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.beforeStatement(HqlSqlBaseWalker.java:109) - select << begin [level=1, statement=select]
2012-11-05 01:25:06,424 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromElement.doInitialize(FromElement.java:157) - FromClause{level=1} : com.emo.sample.domain.Client (generatedAlias0) -> client0_
2012-11-05 01:25:06,427 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : generatedAlias0 -> client0_.clientCode
2012-11-05 01:25:06,432 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : generatedAlias0 -> client0_.clientCode
2012-11-05 01:25:06,543 [main] DEBUG org.hibernate.hql.internal.ast.tree.DotNode.getDataType(DotNode.java:599) - getDataType() : clientCode -> org.hibernate.type.StringType@86411
2012-11-05 01:25:06,544 [main] DEBUG org.hibernate.hql.internal.ast.tree.FromReferenceNode.setResolved(FromReferenceNode.java:74) - Resolved : generatedAlias0.clientCode -> client0_.clientCode
2012-11-05 01:25:06,548 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.beforeStatementCompletion(HqlSqlBaseWalker.java:113) - select : finishing up [level=1, statement=select]
2012-11-05 01:25:06,549 [main] DEBUG org.hibernate.hql.internal.ast.HqlSqlWalker.processQuery(HqlSqlWalker.java:631) - processQuery() :  ( SELECT ( {select clause} client0_.clientCode ) ( FromClause{level=1} Client client0_ ) ( where ( = ( client0_.clientCode client0_.clientCode clientCode ) ? ) ) )
2012-11-05 01:25:06,562 [main] DEBUG org.hibernate.hql.internal.ast.util.JoinProcessor.addJoinNodes(JoinProcessor.java:175) - Using FROM fragment [Client client0_]
2012-11-05 01:25:06,563 [main] DEBUG org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.afterStatementCompletion(HqlSqlBaseWalker.java:117) - select >> end [level=1, statement=select]
2012-11-05 01:25:06,564 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:252) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Client)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'client0_.clientCode as clientCode0_' {alias=generatedAlias0, className=com.emo.sample.domain.Client, tableAlias=client0_}
    |  \-[SQL_TOKEN] SqlFragment: 'client0_.city as city0_, client0_.countryCode as countryC3_0_, client0_.name as name0_, client0_.street as street0_, client0_.zip as zip0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[generatedAlias0], fromElementByTableAlias=[client0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'Client client0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=generatedAlias0,role=null,tableName=Client,tableAlias=client0_,origin=null,columns={,className=com.emo.sample.domain.Client}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'client0_.clientCode' {propertyName=clientCode,dereferenceType=ALL,propertyPath=clientCode,path=generatedAlias0.clientCode,tableAlias=client0_,className=com.emo.sample.domain.Client,classAlias=generatedAlias0}
          |  +-[ALIAS_REF] IdentNode: 'client0_.clientCode' {alias=generatedAlias0, className=com.emo.sample.domain.Client, tableAlias=client0_}
          |  \-[IDENT] IdentNode: 'clientCode' {originalText=clientCode}
          \-[NAMED_PARAM] ParameterNode: '?' {name=param0, expectedType=org.hibernate.type.StringType@86411}

2012-11-05 01:25:06,564 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:25:06,574 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:235) - HQL: select generatedAlias0 from com.emo.sample.domain.Client as generatedAlias0 where generatedAlias0.clientCode=:param0
2012-11-05 01:25:06,575 [main] DEBUG org.hibernate.hql.internal.ast.QueryTranslatorImpl.generate(QueryTranslatorImpl.java:236) - SQL: select client0_.clientCode as clientCode0_, client0_.city as city0_, client0_.countryCode as countryC3_0_, client0_.name as name0_, client0_.street as street0_, client0_.zip as zip0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:06,575 [main] DEBUG org.hibernate.hql.internal.ast.ErrorCounter.throwQueryException(ErrorCounter.java:82) - throwQueryException() : no errors
2012-11-05 01:25:06,629 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:25:06,630 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:25:06,644 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select client0_.clientCode as clientCode0_, client0_.city as city0_, client0_.countryCode as countryC3_0_, client0_.name as name0_, client0_.street as street0_, client0_.zip as zip0_ from Client client0_ where client0_.clientCode=? limit ?
2012-11-05 01:25:06,699 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:25:06,702 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:25:06,702 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:25:06,703 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:25:06,709 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520751067
2012-11-05 01:25:06,713 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:25:06,714 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:25:06,714 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:25:06,715 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:25:06,715 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:25:06,739 [main] DEBUG org.hibernate.loader.Loader.loadEntity(Loader.java:2030) - Loading entity: [com.emo.sample.domain.Client#newClient123456]
2012-11-05 01:25:06,740 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:06,741 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:25:06,742 [main] DEBUG org.hibernate.loader.Loader.loadEntity(Loader.java:2054) - Done entity load
2012-11-05 01:25:06,753 [main] DEBUG org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:131) - Generated identifier: newClient123456, using strategy: org.hibernate.id.Assigned
2012-11-05 01:25:06,765 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:25:06,766 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:25:06,767 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:25:06,771 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects
2012-11-05 01:25:06,771 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2012-11-05 01:25:06,773 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:25:06,774 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.Client{zip=59000, clientCode=newClient123456, street=23 rue du machin, name=Cedric Bou, countryCode=FRA, city=Lille}
2012-11-05 01:25:06,790 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into Client (city, countryCode, name, street, zip, clientCode) values (?, ?, ?, ?, ?, ?)
2012-11-05 01:25:06,793 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doCommit(JdbcTransaction.java:113) - committed JDBC Connection
2012-11-05 01:25:06,793 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.releaseManagedConnection(JdbcTransaction.java:126) - re-enabling autocommit
2012-11-05 01:25:06,795 [main] DEBUG org.hibernate.engine.jdbc.internal.JdbcCoordinatorImpl.close(JdbcCoordinatorImpl.java:138) - HHH000420: Closing un-released batch
2012-11-05 01:25:06,795 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:25:06,796 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:25:06,796 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:25:06,796 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520751067
2012-11-05 01:25:06,797 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Client as generatedAlias0 where generatedAlias0.clientCode=:param0
2012-11-05 01:25:06,798 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:25:06,799 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:25:06,799 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select client0_.clientCode as clientCode0_, client0_.city as city0_, client0_.countryCode as countryC3_0_, client0_.name as name0_, client0_.street as street0_, client0_.zip as zip0_ from Client client0_ where client0_.clientCode=? limit ?
2012-11-05 01:25:06,802 [main] DEBUG org.hibernate.loader.Loader.doQuery(Loader.java:849) - Result set row: 0
2012-11-05 01:25:06,807 [main] DEBUG org.hibernate.loader.Loader.getRow(Loader.java:1344) - Result row: EntityKey[com.emo.sample.domain.Client#newClient123456]
2012-11-05 01:25:06,811 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:140) - Resolving associations for [com.emo.sample.domain.Client#newClient123456]
2012-11-05 01:25:06,812 [main] DEBUG org.hibernate.engine.internal.TwoPhaseLoad.initializeEntity(TwoPhaseLoad.java:271) - Done materializing entity [com.emo.sample.domain.Client#newClient123456]
2012-11-05 01:25:06,813 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:25:06,813 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:25:06,814 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:25:06,814 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:25:06,820 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520751068
2012-11-05 01:25:06,821 [main] DEBUG org.hibernate.ejb.criteria.CriteriaQueryCompiler.compile(CriteriaQueryCompiler.java:218) - Rendered criteria query -> select generatedAlias0 from Client as generatedAlias0 where generatedAlias0.clientCode=:param0
2012-11-05 01:25:06,823 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:25:06,823 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:25:06,824 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select client0_.clientCode as clientCode0_, client0_.city as city0_, client0_.countryCode as countryC3_0_, client0_.name as name0_, client0_.street as street0_, client0_.zip as zip0_ from Client client0_ where client0_.clientCode=? limit ?
2012-11-05 01:25:06,826 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:25:06,826 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:314) - Releasing JDBC connection
2012-11-05 01:25:06,827 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.releaseConnection(LogicalConnectionImpl.java:332) - Released JDBC connection
2012-11-05 01:25:06,827 [main] DEBUG org.hibernate.engine.jdbc.internal.proxy.ConnectionProxyHandler.physicalConnectionReleased(ConnectionProxyHandler.java:219) - HHH000163: Logical connection releasing its physical connection
2012-11-05 01:25:06,828 [main] DEBUG org.hibernate.internal.SessionImpl.<init>(SessionImpl.java:253) - Opened session at timestamp: 13520751068
2012-11-05 01:25:06,828 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.begin(AbstractTransactionImpl.java:158) - begin
2012-11-05 01:25:06,828 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:295) - Obtaining JDBC connection
2012-11-05 01:25:06,829 [main] DEBUG org.hibernate.engine.jdbc.internal.LogicalConnectionImpl.obtainConnection(LogicalConnectionImpl.java:301) - Obtained JDBC connection
2012-11-05 01:25:06,829 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:69) - initial autocommit status: true
2012-11-05 01:25:06,829 [main] DEBUG org.hibernate.engine.transaction.internal.jdbc.JdbcTransaction.doBegin(JdbcTransaction.java:71) - disabling autocommit
2012-11-05 01:25:06,830 [main] DEBUG org.hibernate.loader.Loader.loadEntity(Loader.java:2030) - Loading entity: [com.emo.sample.domain.Client#newClient1234567]
2012-11-05 01:25:06,831 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - select client0_.clientCode as clientCode0_0_, client0_.city as city0_0_, client0_.countryCode as countryC3_0_0_, client0_.name as name0_0_, client0_.street as street0_0_, client0_.zip as zip0_0_ from Client client0_ where client0_.clientCode=?
2012-11-05 01:25:06,832 [main] DEBUG org.hibernate.engine.internal.StatefulPersistenceContext.initializeNonLazyCollections(StatefulPersistenceContext.java:923) - Initializing non-lazy collections
2012-11-05 01:25:06,832 [main] DEBUG org.hibernate.loader.Loader.loadEntity(Loader.java:2054) - Done entity load
2012-11-05 01:25:06,833 [main] DEBUG org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:131) - Generated identifier: newClient1234567, using strategy: org.hibernate.id.Assigned
2012-11-05 01:25:06,833 [main] DEBUG org.hibernate.engine.transaction.spi.AbstractTransactionImpl.commit(AbstractTransactionImpl.java:173) - committing
2012-11-05 01:25:06,834 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareEntityFlushes(AbstractFlushingEventListener.java:143) - Processing flush-time cascades
2012-11-05 01:25:06,834 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.prepareCollectionFlushes(AbstractFlushingEventListener.java:183) - Dirty checking collections
2012-11-05 01:25:06,834 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:117) - Flushed: 1 insertions, 0 updates, 0 deletions to 1 objects
2012-11-05 01:25:06,835 [main] DEBUG org.hibernate.event.internal.AbstractFlushingEventListener.logFlushResults(AbstractFlushingEventListener.java:124) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2012-11-05 01:25:06,835 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:114) - Listing entities:
2012-11-05 01:25:06,835 [main] DEBUG org.hibernate.internal.util.EntityPrinter.toString(EntityPrinter.java:121) - com.emo.sample.domain.Client{zip=59000, clientCode=newClient1234567, street=23 rue du machin, name=Cedric Bou, countryCode=FRA, city=Lille}
2012-11-05 01:25:06,836 [main] DEBUG org.hibernate.engine.jdbc.spi.SqlStatementLogger.logStatement(SqlStatementLogger.java:104) - insert into Client (city, countryCode, name, street, zip, clientCode) values (?, ?, ?, ?, ?, ?)
